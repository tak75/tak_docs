<Window x:Class="AnimatedButton.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:AnimatedButton"
        mc:Ignorable="d"
        Title="MainWindow" Height="300" Width="300" Background="Black">
    <Window.Resources>
        <!--<Style TargetType="Button">
            <Setter Property="Width" Value="90" />
            <Setter Property="Margin" Value="10" />
        </Style>-->
        <!--ボタンのグラデーション-->
        <LinearGradientBrush x:Key="GrayBlueGradientBrush" 
            StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="DarkGray" Offset="0" />
            <GradientStop Color="#CCCCFF" Offset="0.5" />
            <GradientStop Color="DarkGray" Offset="1" />
        </LinearGradientBrush>
        <!--ガラスのグラデーション効果-->
        <GradientStopCollection x:Key="MyGlassGradientStopsResource">
            <GradientStop Color="WhiteSmoke" Offset="0.2" />
            <GradientStop Color="Transparent" Offset="0.4" />
            <GradientStop Color="WhiteSmoke" Offset="0.5" />
            <GradientStop Color="Transparent" Offset="0.75" />
            <GradientStop Color="WhiteSmoke" Offset="0.9" />
            <GradientStop Color="Transparent" Offset="1" />
        </GradientStopCollection>
        <LinearGradientBrush x:Key="MyGlassBrushResource"
            StartPoint="0,0" EndPoint="1,1" Opacity="0.75"
            GradientStops="{StaticResource MyGlassGradientStopsResource}" />
        <!--以下はどちらでもOK-->
        <!--<Style TargetType="Button">-->
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{StaticResource GrayBlueGradientBrush}" />
            <Setter Property="Width" Value="90" />
            <Setter Property="Margin" Value="10" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                            ClipToBounds="True">

                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch" Stroke="{TemplateBinding Background}"
                                RadiusX="20" RadiusY="20" StrokeThickness="5" Fill="Transparent" />

                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle" HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch" Stroke="Transparent" StrokeThickness="20"
                                Fill="{TemplateBinding Background}" RadiusX="20" RadiusY="20" />

                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                StrokeThickness="2" RadiusX="10" RadiusY="10" Opacity="0"
                                Fill="{StaticResource MyGlassBrushResource}"
                                RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0.0" Color="LightBlue" />
                                            <GradientStop Offset="1.0" Color="Gray" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                
                                <!-- These transforms have no effect as they are declared here.
                                    The reason the transforms are included is to be targets
                                    for animation (see later). -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                                <!-- A BevelBitmapEffect is applied to give the button a "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>

                            <!-- Present Text of the button. -->
                            <DockPanel Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" Margin="20"
                                    Content="{TemplateBinding  Content}" TextBlock.Foreground="Black" />
                            </DockPanel>
                        </Grid>
                        
                        <ControlTemplate.Triggers>
                            <!--マウスをボタンの上に置いた時のアニメーション-->
                            <Trigger Property="IsMouseOver" Value="True">
                                <!-- Below are three property settings that occur when the
                                condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user
                                mouses over it. -->
                                <Setter Property ="Rectangle.Stroke" TargetName="outerRectangle"
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <!-- Sets the glass opacity to 1, therefore, the 
                                glass "appears" when user mouses over it. -->
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                                <!-- Makes the text slightly blurry as though you
                                were looking at it through blurry glass. -->
                                <Setter Property="ContentPresenter.BitmapEffect"
                                        TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <!--ぼかし効果を入れる-->
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            
                            <!-- ボタンにフォーカスがある場合 (ユーザーがクリックした後など) に対処 -->
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Rectangle.Stroke" TargetName="outerRectangle"      
                                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="Rectangle.Opacity" Value="1" TargetName="glassCube" />
                            </Trigger>

                            <!-- MouseEnter のアニメーション. -->
                            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                <EventTrigger.Actions>
                                    <BeginStoryboard Name="mouseEnterBeginStoryboard">
                                        <Storyboard>
                                            <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                            <!-- Duration：アニメーション期間が0.5秒、By：ガラスが10% 削減 -->
                                            <DoubleAnimation Storyboard.TargetName="glassCube"
                                                Storyboard.TargetProperty=
                                                "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                By="-0.1" Duration="0:0:0.5" />
                                            <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                            <DoubleAnimation
                                                Storyboard.TargetName="glassCube"
                                                Storyboard.TargetProperty=
                                                "(Rectangle.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                By="-0.1" Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                            
                            <!-- MouseLeave のアニメーション. -->
                            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                                <EventTrigger.Actions>
                                    <!-- Stopping the storyboard sets all animated properties back to default. -->
                                    <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                                </EventTrigger.Actions>
                            </EventTrigger>

                            <!-- ボタンがクリックされたときのアニメーション  -->
                            <EventTrigger RoutedEvent="Button.Click">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="glassCube"
                                                Storyboard.TargetProperty=
                                                "(Rectangle.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)"
                                                By="360" Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <StackPanel HorizontalAlignment="Left">
        <Button>Button 1</Button>
        <Button>Button 2</Button>
        <Button>Button 3</Button>
    </StackPanel>
</Window>
