====
仕様
====

C# 1.0からの仕様
================

------------------------
デリゲートとイベント処理
------------------------

* C#で宣言される型には、クラス、構造体、列挙体、インタフェース、デリゲートの5種がある。
  デリゲートは型の一種とみなされる。
  型であるデリゲートは、独立して宣言され、様々なクラスから参照される
* デリゲート型変数は関数を入れるための変数である

  .. code-block:: csharp

    // デリゲートの宣言
    public delegate void SampleDelegate(int x);
    class DelegateFirst
    {
        static vboid Reverse(int n){Console.Write(-n);}
        static void Main()
        {
           // デリゲート型変数の宣言
            SampleDelegate d = Revarse;
            d(3);       // 結果：-3
        }
    }

* 複数のメソッドを登録しておき、一度の呼び出しでまとめて実行する機能（マルチキャスティング）がある
* 例１：データを返さないイベントの場合（推奨は、方法2 > 方法1 の順）。
  EventHandlerデリゲートと、EventArgsクラスを使うことで、デリゲート宣言と、返すデータのクラスの宣言を省略できる。

  * 方法1

    .. code-block:: csharp

        // イベントを発生する側のクラス
        public class SleepClass
        {
            // データを持たないイベントデリゲートの宣言
            //ここでは"Time"というイベントデリゲートを宣言する
            public event EventHandler Time;

            public void Start()
            {
                System.Threading.Thread.Sleep(5000);
                if (Time != null)
                {
                    //"Time"イベントの発生
                    Time(this, EventArgs.Empty);
                }
            }
        }

    .. code-block:: csharp

        // イベントを受取り処理を行う側のクラス
        private void button1_Click(object sender, System.EventArgs e)
        {
            SleepClass clsSleep = new SleepClass();
            //イベントハンドラの追加
            clsSleep.Time += new EventHandler(this.SleepClass_Time);
            clsSleep.Start();
        }

        private void SleepClass_Time(object sender, System.EventArgs e)
        {
            //イベントが発生したとき
            MessageBox.Show("OK!");
        }

  * 方法2（イベントを受取り処理を行う側のクラスについては方法1と同様）

    .. code-block:: csharp

        // イベントを発生する側のクラス
        public class SleepClass
        {
            // データを持たないイベントデリゲートの宣言
            public event EventHandler Time;

            // SleepClassを継承して新たなクラスを作ることを考えるとvirtualにした方がよい
            protected virtual void OnTime(EventArgs e)
            {
                if (Time != null)
                {
                    Time(this, e);
                }
            }

            public void Start()
            {
                System.Threading.Thread.Sleep(5000);
                OnTime(EventArgs.Empty);
            }
        }

* 例２：データを返すイベントの場合

  .. code-block:: csharp

    // イベントを発生する側のクラス
    //Timeイベントで返されるデータ
    //ここではstring型のひとつのデータのみ返すものとする
    public class TimeEventArgs : EventArgs
    {
        public string Message;
    }

    public class SleepClass
    {
        //デリゲートの宣言
        //TimeEventArgs型のオブジェクトを返すようにする
        public delegate void TimeEventHandler(object sender, TimeEventArgs e);
        
        //イベントデリゲートの宣言
        public event TimeEventHandler Time;
        
        protected virtual void OnTime(TimeEventArgs e)
        {
            if (Time != null)
            {
                Time(this, e);
            }
        }
        
        public void Start()
        {
            System.Threading.Thread.Sleep(5000);
            //返すデータの設定
            TimeEventArgs e = new TimeEventArgs();
            e.Message = "終わったよ。";
            //イベントの発生
            OnTime(e);
        }
    }

  .. code-block:: csharp

    // イベントを受取り処理を行う側のクラス
    private void button1_Click(object sender, System.EventArgs e)
    {
        SleepClass clsSleep = new SleepClass();
        clsSleep.Time += new SleepClass.TimeEventHandler(this.SleepClass_Time);
        clsSleep.Start();
    }

    private void SleepClass_Time(object sender, TimeEventArgs e)
    {
        //返されたデータを取得し表示
        MessageBox.Show(e.Message);
    }

.. warning::

  EventArgsの派生クラスを使わない方法でも動作はするが、EventArgsの派生クラスを使った方法が
  .NETでは推奨された方法なので、使うべきではない。

  .. code-block:: csharp

    //デリゲートの宣言（非推奨の方法！）
    public delegate void TimeEventHandler(string message, int number);


C# 2.0からの仕様
================

部分型
ジェネリクス
静的クラス
yieldキーワード
匿名デリゲート
プロパティに対する個別のアクセス制御
Null許容型とnull結合演算子

C# 3.0からの仕様
================

-------------
varキーワード
-------------

* ローカル変数でのみ利用可能

拡張メソッド
部分メソッド

--------
ラムダ式
--------

* `多分わかりやすいC#のDelegateとラムダ式入門 <https://tech-lab.sios.jp/archives/15318>`__
* ラムダ式により、Delegateが不要となった
* 変遷としては、①Delegate -> ②Action、Func -> ③ラムダ式＋Action、Func
* ラムダ式無名関数が長い処理の場合や、他でも利用されている場合などは、②がよいと思われる
* ①Delegate

  .. code-block:: csharp

    class Program
    {
        public delegate void Callback(HttpResponseMessage res);
    
        static void Main(string[] args)
        {
            Callback callback = GetStatusCode;
            HttpRequest("http://www.yahoo.co.jp/",callback);
            Console.ReadLine();
        }
    
        static void GetStatusCode(HttpResponseMessage res)
        {
            Console.WriteLine(res.StatusCode.ToString());
        }
    
        async static void HttpRequest(String url,Callback callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

* ②Action、Func

  .. code-block:: csharp

    class Program
    {
        static void Main(string[] args)
        {
            HttpRequest("http://www.yahoo.co.jp/", GetStatusCode);
            Console.ReadLine();
        }
    
        static void GetStatusCode(HttpResponseMessage res)
        {
            Console.WriteLine(res.StatusCode.ToString());
        }
    
        async static void HttpRequest(String url, Action<HttpResponseMessage> callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

* ③ラムダ式＋Action、Func

  .. code-block:: csharp

    class Program
    {
        static void Main(string[] args)
        {
            HttpRequest("http://www.yahoo.co.jp/", (res) => {
                Console.WriteLine(res.StatusCode.ToString());
            }); 
            Console.ReadLine();
        }
    
        async static void HttpRequest(String url, Action<HttpResponseMessage> callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

オブジェクト
初期化の簡略化
自動実装プロパティ
匿名型
配列宣言の型省略
クエリ式

C# 4.0からの仕様
================

dynamicキーワード
オプション引数・名前付き引数
ジェネリクスの共変性・反変性

C# 5.0からの仕様
================

C# 6.0からの仕様
================

----------
文字列補間
----------

* 先頭に「$」記号が付いた文字列
* その中の波かっこ「{}」で囲まれた部分の式を評価して文字列に当てはめてくれる

  .. code-block:: csharp
  
    Text1.Text = $"現在時刻は{DateTimeOffset.Now:HH:mm}";
    // Text1.Text = 「現在時刻は12:00」などとなる

-------------------------
Null条件演算子?.および?[]
-------------------------

Null 条件付き演算子は、そのオペランドが null 以外と評価された場合にのみ、
オペランドにメンバー アクセス操作 (?.) または要素アクセス操作 (?[]) を適用し、
それ以外の場合は、null を返す。

.. code-block:: csharp

    double SumNumbers(List<double[]> setsOfNumbers, int indexOfSetToSum)
    {
        return setsOfNumbers?[indexOfSetToSum]?.Sum() ?? double.NaN;
    }

    var sum1 = SumNumbers(null, 0);
    Console.WriteLine(sum1);  // output: NaN

    var numberSets = new List<double[]>
    {
        new[] { 1.0, 2.0, 3.0 },
        null
    };

    var sum2 = SumNumbers(numberSets, 0);
    Console.WriteLine(sum2);  // output: 6

    var sum3 = SumNumbers(numberSets, 1);
    Console.WriteLine(sum3);  // output: NaN

----------------------
読み取り専用プロパティ
----------------------

式形式[=>]（ラムダ式ではない）を使用して読み取り専用プロパティを定義できる。
下記例の[1]～[3]は同義である。

.. code-block:: csharp

    // [1]
    public string Title => "タイトル";

    // [2]
    public string Title { get; } = "タイトル";

    // [3]
    public string Title { get => "タイトル"; }

[3]はC# 7.0からの仕様であり、setについても定義できる。

.. code-block:: csharp

    private string locationName;
    public string Name
    {
        get => locationName;
        set => locationName = value;
    }


静的 using ディレクティブ
例外フィルタ

C# 7.0からの仕様
================
出力変数宣言
パターンマッチング
1	is 式の拡張
2	switch 文の拡張
タプル
1	タプル記法
2	分解
値の破棄
ref戻り値、ref変数
1	ref戻り値
2	ref変数

C# 7.1からの仕様
================

非同期なMainメソッド
default式

C# 7.2からの仕様
================

値型の参照セマンティクス
1	in参照渡し、ref readonly参照戻り値
2	readonly構造体
3	ref構造体
末尾以外の場所での名前付き引数
private protected アクセス修飾子
数値リテラルの改善

C# 7.3からの仕様
================

C# 8からの仕様
================

null許容参照型
1	null許容コンテキスト
2	null免除演算子
インターフェイスの既定メンバー
パターンマッチングの拡張
非同期ストリーム
範囲指定
その他の仕様