=====
全般
=====


as演算子とis演算子
==================

キャストに失敗すると例外を投げるため、実行速度のコストが大きな問題となりうる。
そこで、事前に型チェックした上でキャストする方法がある。
これにはis演算子を使用する。

  .. code-block:: csharp

    object a = new ClassA();
    if(a is ClassA)
    {
      var b = (ClassA)a;
      b.～
    }

しかし、as演算子を使用すると例外を投げない変換が可能となる。
キャストよりas演算子の方が高速であるので、as演算子の方がオススメ？

  .. code-block:: csharp

    object a = new ClassA();
    ClassA b = a as ClassA;
    if(b != null)
    {
      b.～
    }

サフィックス
============

  .. code-block:: csharp

    decimal e = 0.123;

上記のコードはコンパイルエラーとなる。
理由は、0.123がdouble型の定数であるのに、decimal型の変数に代入しているため。
(decimal)でキャストしてもエラーは解除されるが、実行効率は下がる。
この場合は、以下のようにサフィックスを付加するべき。

  .. code-block:: csharp

    decimal e = 0.123m;

サフィックスは以下の通り。

.. csv-table:: サフィックス
   :header-rows: 1
   :widths: 3, 2

   サフィックス,型
   U u,uint型
   L l,long型
   UL Ul uL ul LU Lu lU lu,ulong型
   F f,float型
   D d,double型
   M m,decimal型

decimal型とdouble型
===================

.. csv-table:: decimal型とdouble型
   :header-rows: 1
   :widths: 2, 7, 7

   型,メリット,デメリット
   decimal型,表現できる桁数なら誤差は生じないため、お金の計算に向いている。100000000000000 + 0.01m = 100000000000000.01となる,double型と違い、極端に大きな数や極端に小さな数は扱えない
   double型,天文学的数値を表すことができる,誤差が生じる。100000000000000 + 0.01m = 100000000000000となる

引数の既定値
============

以下のように、メソッド引数に既定値を設定することができる。ただし、既定値は定数であること。

  .. code-block:: csharp

    class A
    {
      public static void WriteIt(TextWriter write, string name = "I", string obj = "a boy")
      {
        // 省略
      }
    }

名前付き引数
============

以下のように、メソッド呼び出しの引数に名前を指定することができる。"="ではなく":"である点に注意！

  .. code-block:: csharp

    A.WriteIt(writer: Console.Out, obj: "a girl");


辞書型をforeachで使用
=====================

  .. code-block:: csharp

    foreach(var (key, value) in this.MeasUnitDict)
    {
    }

変換
====

---------------
int -> enum変換
---------------

  .. code-block:: csharp

    int intValue = 3;   // enum型の値
    Color enumValue = (Color)Enum.ToObject(typeof(Color), intValue);

ジェネリック
============

------
基本形
------

  .. code-block:: csharp

    class MyClass<T>
    {
      internal static T GetSomeValue()
      {
        return default(T);  
      }
    }

----
制約
----

以下の「where T:X, new()」が制約

  .. code-block:: csharp

    // where : 制約を示すキーワード
    // T     : 対象とする型パラメータ
    // X     : クラス名で、少なくともTがクラスXを継承していなければならないことを示す
    // new() : new制約と呼ばれるもので、new可能であることを制約としている
    class MyClass<T> where T:X, new()
    {
      internal static T GetSomeValue()
      {
        new T().Say());  
      }
    }

属性
====

----------
既定の属性
----------

属性は、その属性を扱うプログラムに対する一種のメタデータである。
属性はメソッドに付加する。

.. csv-table:: 属性
  :header-rows: 1
  :widths: 1, 2

  属性,説明
  [Conditional("DEBUG")],デバッグビルド時のみ実行される
  [Conditional("XXXXX")],マクロXXXXXが定義されている場合のみ実行される
  [Obsolete],互換のために残しているが、新規に呼び出すべきではない
  [Obsolete("XXXXX")],（Obsoleteメソッドの使用時にメッセージXXXXXを表示する方法）

------------------------
属性の自作とリフレション
------------------------

属性を自作するとともに、それを読みだす処理も作成する必要がある。

* System.Attributeクラスを継承したクラスを自作する。この際、自作するクラスの名前は「Attribute」で終わるようにする
* 属性として記述するときは、Attributeを略した名前でも使用できる

  .. code-block:: csharp

    using System;

    class SampleAttribute : Attribute{}

    class Program{
    {
      // [SampleAttribute]と記載してもOK
      [Sample]
      public static void oldSample()
      {
      }

      static void Main(string[] args)
      {
        // Programクラスに定義された static なメソッドを列挙する
        foreach(var n in typeof(Program).GetMethods())
        {
          // SampleAttribute は Sample と略してもOK 
          if(n.GetCustomAttributes(typeof(SampleAttribute),false).Length > 0)
          {
            n.Invoke(null, null);
          }
        }
      }
    }

インタフェースでのアクセシビリティ
==================================

* メソッドにアクセシビリティを付ける必要はない（通常付けない？）
* 付ける場合はpublic？

  .. code-block:: csharp

    public interface IControl
    {
        void Paint(); // ←　publicは不要
    }

変数のスレッドセーフ
====================

以下が良さそう。
ただし、マルチコアを考えた場合がよくわからん（コア毎にキャッシュがあるので・・）

* int,double型はInterlockedを使用
* enum型はintにキャストしてInterlockedを使用

  .. code-block:: csharp

    private int _field;
    public MyEnum Field
    { 
      get { return (MyEnum)Interlocked.CompareExchange(ref _field, 0, 0); }
      set { Interlocked.Exchange(ref _field, (int)value); }
    } 

* bool型はThreadSafeBoolクラス（内部でInterlockedを使用した独自クラス）を使用

  .. code-block:: csharp

    public class ThreadSafeBool
    {
      private int _threadSafeBoolBackValue = 0;
      public bool ThreadSafeBool
      {
          get { return (Interlocked.CompareExchange(ref _threadSafeBoolBackValue, 1, 1) == 1); }
          set
          {
              if (value) Interlocked.CompareExchange(ref _threadSafeBoolBackValue, 1, 0);
              else Interlocked.CompareExchange(ref _threadSafeBoolBackValue, 0, 1);
          }
      }
      public ThreadSafeBool(bool val)
      {
          this.Value = val;
      }
    }

共用体（union）
===============

.. code-block:: csharp

  using System.Runtime.InteropServices;

  namespace Test
  {
    [StructLayout(LayoutKind.Explicit)]
    struct State
    {
      [FieldOffset(0)] public uint all;
      [FieldOffset(0)] public Flag flag;
    }
    
    // Enum型をビット・フィールド化
    [Flags]
    public enum Flag:uint
    {
      A = 0x01,
      B = 0x02,
      C = 0x04,
      D = 0x08,
      E = 0x10,
      F = 0x20,
      G = 0x40,
      H = 0x80,
    }
  }

具象クラスからの継承について
============================

* インタフェース、もしくは抽象クラスを用いることが推奨されており、具象クラスから継承すべきではない
* 具象クラスと同様に、抽象クラスでも具体的なコードを有するメソッドを定義することができる。
  このため、具象クラスである必然性はない。
* 抽象クラスであれば、継承先クラスにメソッドの実装を強制できるので、抽象クラスが推奨されている
 
拡張メソッド
============

--------------------
列挙体の拡張メソッド
--------------------

* 列挙体の要素名リストを取得したい場合、ToString()を使用すると、要素名そのものの文字列が出力される
* これを好きな要素名リストとしたい場合、クラスであればToString()をオーバロードできるが、列挙体の場合はできない
* 代替策としては、以下のように拡張クラスを使用すればよい

.. code-block:: csharp

  public enum DataType
  {
    Data1,
    Data2,
    Data3
  }

  public static class DataTypeExtension
  {
    // 列挙体の要素名辞書
    static Dictionary<DataType, string> DataTypeNames = new Dictionary<DataType, string>
    {
      {DataType.Data1, "data 1" },
      {DataType.Data2, "data 2" },
      {DataType.Data3, "data 3" }
    };

    // ToString()の代わりとなる拡張メソッド
    public static string ToName(this DataType dataType) => DataTypeNames[dataType];
  }

比較方法
========

* SerializeJson() した上で、SequenceEqual() で比較する

------------------
オブジェクトの比較
------------------

  .. code-block:: csharp

    return this.SerializeJson().SequenceEqual(other.SerializeJson());

------------
リストの比較
------------

  .. code-block:: csharp

    var list1 = this.Info1.SelectMany(p => p.Info2.SelectMany(w => w).Select(x => (x.AValue, x.BValue))).ToList();
    var list2 = other.Info1.SelectMany(p => p.Info2.SelectMany(w => w).Select(x => (x.AValue, x.BValue))).ToList();

    return list1.SequenceEqual(list2);