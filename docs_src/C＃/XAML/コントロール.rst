============
コントロール
============

レイアウトコントロール
======================

------------------
Borderコントロール
------------------

https://blog.okazuki.jp/entry/20130104/1357309697

.. code-block:: XML

    <Border 
        Padding="5, 10, 15, 20"
        BorderThickness="5,10,15,20" 
        BorderBrush="Red" 
        CornerRadius="5, 10, 15, 20" 
        Background="Blue">
        <TextBlock Text="中身" Background="Black" Foreground="White" />
    </Border>

---------------------------
BulletDecoratorコントロール
---------------------------

https://blog.okazuki.jp/entry/20130104/1357309697

.. code-block:: XML

    <BulletDecorator Background="Cyan">
        <BulletDecorator.Bullet>
            <TextBlock Text="行頭" Foreground="White" Background="Black" />
        </BulletDecorator.Bullet>
        <TextBlock Text="子要素" Foreground="White" Background="Red" />
    </BulletDecorator>

------------------
Canvasコントロール
------------------

* https://blog.okazuki.jp/entry/20130104/1357315810
* Canvasの上下左右を起点として位置を指定する

.. code-block:: XML

    <Canvas>
        <Button Canvas.Top="10" Canvas.Left="10" Content="Button1" />
        <Button Canvas.Top="10" Canvas.Right="10" Content="Button2" />
        <Button Canvas.Bottom="10" Canvas.Left="10" Content="Button3" />
        <Button Canvas.Bottom="10" Canvas.Right="10" Content="Button4" />
    </Canvas>

---------------------
DockPanelコントロール
---------------------

https://blog.okazuki.jp/entry/20130105/1357395569

.. code-block:: XML

    <DockPanel>
        <!-- メニューやツールバー -->
        <Button DockPanel.Dock="Top" Content="Menu" />
        <Button DockPanel.Dock="Top" Content="Toolbar" />
        <!-- ステータスバー -->
        <Button DockPanel.Dock="Bottom" Content="StatusBar" />
        <!-- ツリーが表示される場所 最低限の幅確保のためMinWidthプロパティを指定 -->
        <Button DockPanel.Dock="Left" Content="Tree" MinWidth="150" />
        <!-- エクスプローラーの右側の領域 -->
        <Button Content="Content" />
    </DockPanel>

---------------------
WrapPanelコントロール
---------------------

* https://blog.okazuki.jp/entry/20130105/1357395569
* 子要素が外にはみ出したときは、折り返して表示
* 子要素サイズをItemHeight、ItemWidthで指定できる

.. code-block:: XML

    <WrapPanel Orientation="Vertical" ItemHeight="75" ItemWidth="50">
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
        <Button Content="Button" Width="75" />
    </WrapPanel>

-------------------
ViewBoxコントロール
-------------------

* https://blog.okazuki.jp/entry/20130105/1357400239
* 子要素を拡大縮小して表示するコントロール

.. code-block:: XML

    <WrapPanel>
        <Viewbox Width="75" Height="75" Stretch="None">
            <Button Content="Button" />
        </Viewbox>
        <Viewbox Width="75" Height="75" Stretch="Fill">
            <Button Content="Button" />
        </Viewbox>
        <Viewbox Width="75" Height="75" Stretch="Uniform">
            <Button Content="Button" />
        </Viewbox>
        <Viewbox Width="75" Height="75" Stretch="UniformToFill">
            <Button Content="Button" />
        </Viewbox>
    </WrapPanel>

------------------------
ScrollViewerコントロール
------------------------

* https://blog.okazuki.jp/entry/20130106/1357475541
* CanContentScroll
  * スクロール時に論理単位でスクロール(要素単位でスクロール)するか物理単位でスクロール(ピクセル単位でスクロール)するか指定可能
  * ボタンなどのコントロールの途中で止まる／止まらないなど

------------------------
GridSplitterコントロール
------------------------

* https://blog.okazuki.jp/entry/20130107/1357571958
* Gridコントロールをマウスでサイズ変更する

レイアウトに影響を与えるプロパティ
==================================

* MinWidth,MaxWidth：コントロールの最小,最大の幅を設定
* ピクセル以外に指定できる
  
  * 10in：インチで指定
  * 10cm：センチメートルで指定
  * 10pt：ポイントで指定

コンテンツモデル
================

* https://blog.okazuki.jp/entry/20130113/1358094630
* WPFでは、単一の要素を表示するコントロールとしてContentControlというものが定義
* このコントロールは、ButtonやLabelなどの多くのコントロールの親クラス
* ContentControlにはContentという名前のobject型のプロパティが定義されていて、 **そこに設定されたクラスの型に応じて表示方法が切り替わる**
* 表示ロジックは以下のとおり

  * UIElement型(ButtonやRectangleなどのコントロール)の場合はそのまま表示する。
  * **ContentTemplateにデータテンプレートが設定されている場合は、それを使って表示する。**
  * Contentプロパティに設定された型に対してデータテンプレートが定義されている場合は、それを使って表示する。
  * UIElement型へ変換するTypeConverterがある場合は、それを使ってUIElement型に変換して表示する。
  * string型へ変換するTypeConverterがある場合は、それを使って文字列に変換してTextBlockのTextプロパティに設定して表示する。
  * ToStringメソッドの呼び出し結果をTextBlockのTextプロパティに設定して表示する。

Buttonコントロール
==================

------------------------
RepeatButtonコントロール
------------------------

* https://blog.okazuki.jp/entry/20130114/1358172834
* ボタンの上でマウスが押されている間、一定間隔でClickイベントを発行する
* Clickイベントの発行間隔は、以下のプロパティで設定
 
  * Delay：ボタンが押されている間にClickイベントの繰り返しが開始するまでに待つ時間（ミリ秒）を指定
  * Interal：Clickイベントの繰り返しの感覚（ミリ秒）を指定

.. code-block:: XML

    <RepeatButton Content="0回" Click="Button_Click" 
                  Delay="1000" 
                  Interval="2000" />

DataGridコントロール
====================

----------------------------------------------------
自動生成機能＋コードビハインドでカスタマイズする方法
----------------------------------------------------

* https://blog.okazuki.jp/entry/20130218/1358172834
* DataGridの列の自動生成は、列を自動生成するタイミングで発生するAutoGeneratingColumnイベントである程度カスタマイズすることができ、
  DataGridにAutoGeneratingColumnイベントハンドラを作成し下記のように記述すればよい
* ただし、単純なケースへの対応や、属性を利用した汎用的なデータの表示機能を開発するケースでのみ使用される方法であり、一般的な方法ではない

.. code-block:: csharp

    private void dataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        // プロパティ名をもとに自動生成する列をカスタマイズします
        switch (e.PropertyName)
        {
            case "Name":
                // Name列は最初に表示してヘッダーを名前にする
                e.Column.Header = "名前";
                e.Column.DisplayIndex = 0;
                break;
            case "Age":
                // Ageプロパティは1番目に表示してヘッダーを年齢にする
                e.Column.Header = "年齢";
                e.Column.DisplayIndex = 1;
                break;
            case "Gender":
                // Genderプロパティは表示しない
                e.Cancel = true;
                break;
            case "AuthMember":
                // AuthMemberプロパティは2番目に表示してヘッダーを承認済みにする
                e.Column.Header = "承認済み";
                e.Column.DisplayIndex = 2;
                break;
            default:
                throw new InvalidOperationException();
        }
    }

----------------------
自分で列を定義する方法
----------------------

* https://blog.okazuki.jp/entry/20130224/1361693816
* 「自動生成機能＋コードビハインド」より、こちらが一般的な方法

.. code-block:: XML

    <!-- 見た目を定義するフォーマット -->
    <DataGridTemplateColumn>
        <DataGridTemplateColumn.HeaderStyle>
            <Style TargetType="DataGridColumnHeader">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            </Style>
        </DataGridTemplateColumn.HeaderStyle>
        <DataGridTemplateColumn.HeaderTemplate>
            <DataTemplate>
                <!-- ヘッダの見た目 -->
            </DataTemplate>
        </DataGridTemplateColumn.HeaderTemplate>
        <DataGridTemplateColumn.CellTemplate>
            <DataTemplate>
                <!-- セルの見た目 -->
            </DataTemplate>
        </DataGridTemplateColumn.CellTemplate>
        <DataGridTemplateColumn.CellEditingTemplate>
            <DataTemplate>
                <!-- セル編集時の見た目 -->
            </DataTemplate>
        </DataGridTemplateColumn.CellEditingTemplate>
    </DataGridTemplateColumn>

TreeViewコントロール
====================

* https://blog.okazuki.jp/entry/20130409/1365479109
* DataTemplateと異なる点は、ItemsSourceプロパティに、現在表示している要素の子にあたるものをItemsSourceプロパティに設定する点

.. code-block:: XML

    <!-- 見た目を定義するフォーマット -->
    <TreeView>
        <TreeView.ItemTemplate>
            <HierarchicalDataTemplate DataType="xxx">
                <!-- アイテムの見た目 -->
            </HierarchicalDataTemplate>
        </TreeView.ItemTemplate>
    </TreeView>

Calendarコントロール
====================

* https://blog.okazuki.jp/entry/2013/07/08/233948

ContextMenuコントロール
=======================

* https://blog.okazuki.jp/entry/2014/08/11/220008
* 特定のコントロールに対して固有のメニュー（主に右クリックしたときに表示されるメニュー）を提供するためのコントロール

Menuコントロール
================

* https://blog.okazuki.jp/entry/2014/08/12/122541

ToolBarコントロール
===================

* https://blog.okazuki.jp/entry/2014/08/12/215209

CheckBoxコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/12/230248

ComboBoxコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/14/201047
* IsEditableプロパティをtrueに設定することで、選択肢にない項目の入力が可能

.. code-block:: XML

    <!-- 見た目を定義するフォーマット -->
    <ComboBox>
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <!-- アイテムの見た目 -->
            </DataTemplate>
        </ComboBox.ItemTemplate>
    </ComboBox>

ListBoxコントロール
====================

* https://blog.okazuki.jp/entry/2014/08/14/205338

.. code-block:: XML

    <!-- 見た目を定義するフォーマット -->
    <ListBox>
        <ListBox.ItemTemplate>
            <DataTemplate>
                <!-- アイテムの見た目 -->
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>

RadioButtonコントロール
=========================

* https://blog.okazuki.jp/entry/2014/08/15/124703

Sliderコントロール
===================

* https://blog.okazuki.jp/entry/2014/08/15/220915

TabControlコントロール
========================

* https://blog.okazuki.jp/entry/2014/08/15/232445
* ItemsSourceプロパティにコレクションを設定すると、ItemTemplateプロパティに従ってTabのヘッダを表示することができる 

.. code-block:: XML

    <!-- 見た目を定義するフォーマット -->
    <TabControl>
        <TabControl.ItemTemplate>
            <DataTemplate>
                <!-- Tabのヘッダの見た目 -->
            </DataTemplate>
        </TabControl.ItemTemplate>
        <TabControl.ContentTemplate>
            <DataTemplate>
                <!-- Tabページの内容 -->
            </DataTemplate>
        </TabControl.ContentTemplate>
    </TabControl>

Labelコントロール
=================

* https://blog.okazuki.jp/entry/2014/08/16/150009
* 「_アルファベット」でアクセスキーを提供して、Targetプロパティに設定したコントロールにフォーカスをうつす機能がある
* 下記の例では、Alt+FでtextBox1へフォーカスが移動し、Alt+EでtextBox2へフォーカスが移動する

.. code-block:: XML

    <StackPanel Margin="5">
        <Label Content="ファイル(_F)" Target="{Binding ElementName=textBox1}" />
        <TextBox x:Name="textBox1" />
        <Label Content="編集(_E)" Target="{Binding ElementName=textBox2}" />
        <TextBox x:Name="textBox2" />
    </StackPanel>

ProgressBarコントロール
=======================

* https://blog.okazuki.jp/entry/2014/08/16/150009
* IsIndeterminateプロパティをtrueに設定することで、固定の値ではなく、何かの作業をしていることを示すアニメーションを表示することができる

StatusBarコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/16/150009

TextBlockコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/16/150009
* Inlinesというプロパティもあり、ここにRunやHyperlinkをつかって書式付のテキストやハイパーリンクを挿入することもできる
* 改行もできる

.. code-block:: XML

    <TextBlock>
        <Run Text="いろいろ指定できる" />
        <Hyperlink NavigateUri="http://www.bing.com">リンクできる</Hyperlink>
        <Run Foreground="Red" Text="色も付けれる" />
        <Run FontFamily="メイリオ" Text="フォントも変えれます" />
        <LineBreak />
        <Run Text="改行も入れることができます" />
    </TextBlock>

Popupコントロール
=================

* https://blog.okazuki.jp/entry/2014/08/16/221447
* 画面上に別ウィンドウとして項目を表示するためのコントロール
* インテリセンスの自前実装などに使用できる

ToolTipコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/16/221447
* 以下のように、ToolTip内に画像を表示することも可能

.. code-block:: XML

    <Button Content="Button">
        <Button.ToolTip>
            <ToolTip>
                <StackPanel Orientation="Horizontal">
                    <Image Source="anthem.jpg" Height="100" />
                    <TextBlock Text="アンセム" />
                </StackPanel>
            </ToolTip>
        </Button.ToolTip>
    </Button>

TextBoxコントロール
=====================

* https://blog.okazuki.jp/entry/2014/08/16/221447
* 改行や、タブの挿入が可能で、横スクロールバーと縦スクロールバーが常に表示されるTextBoxコントロールは以下のように定義する

.. code-block:: XML

    <TextBox 
        AcceptsReturn="True"
        AcceptsTab="True"
        HorizontalScrollBarVisibility="Visible"
        VerticalScrollBarVisibility="Visible"/>

MediaElementコントロール
========================

* https://blog.okazuki.jp/entry/2014/08/16/221447
* 音楽や動画を再生するためのコントロール
