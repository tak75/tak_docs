==================
ユーザコントロール
==================

UserControl
===========

* https://blog.okazuki.jp/entry/2014/09/08/203943
* 複数のコントロールを組み合わせたコントロールを作成するのに向いている

-----------------------------
NumericUpDownコントロールの例
-----------------------------

.. code-block:: XML

    <UserControl
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:CreateControlSample01" 
        x:Class="CreateControlSample01.NumericUpDown" 
        mc:Ignorable="d" 
        d:DesignHeight="100" d:DesignWidth="287">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <RepeatButton Content="Up" Grid.Column="1" Margin="2.5" Click="UpButton_Click"/>
            <RepeatButton Content="Down" Grid.Column="1" Grid.Row="1" Margin="2.5" Click="DownButton_Click"/>
            <TextBlock x:Name="textBlockValue" Grid.RowSpan="2" TextWrapping="Wrap" HorizontalAlignment="Right" 
                       VerticalAlignment="Center" Margin="5" Foreground="Black"
                       Text="{Binding Value, RelativeSource={RelativeSource FindAncestor
                                , AncestorType={x:Type local:NumericUpDown}}}"/>
        </Grid>
    </UserControl>

.. code-block:: csharp

    // NumericUpDownの値を保持するためのValue依存関係プロパティ
    public static readonly DependencyProperty ValueProperty =
        DependencyProperty.Register(
            "Value", 
            typeof(int), 
            typeof(NumericUpDown), 
            new PropertyMetadata(0));

    public int Value
    {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
    }

    // RepeatButtonのクリックイベント
    private void UpButton_Click(object sender, RoutedEventArgs e)
    {
        this.Value++;
    }

    private void DownButton_Click(object sender, RoutedEventArgs e)
    {
        this.Value--;
    }

VisualStateManager
==================

* https://blog.okazuki.jp/entry/2014/09/08/203943
* 見た目の状態を管理する機能
* 状態に名前を付けて管理
