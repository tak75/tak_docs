=======
AWS応用
=======

【S3/CloudFront】画像を配信する
===============================

----
用語
----

.. glossary::

  S3

    * 安価で耐久性の高いAWSのクラウドストレージサービス
    * 特徴

      * 1GB約3円/月
      * ほぼ100%の高い耐久性
      * 容量無制限。1ファイル最大5TBまで
      * バケットやオブジェクトに対してアクセス制限を設定できる

    * 重要概念

      * バケット

        * オブジェクトの保存場所。名前はグローバルでユニークな必要あり

      * オブジェクト

        * データ本体。S3に格納されるファイルで、各々にURLが付与される
        * バケット内オブジェクト数は無制限

      * キー

        * オブジェクトの格納URLパス

    * 利用シーン

      * 静的コンテンツの配信

        * img画像をS3から配信

      * バッチ連携用のファイル置き場

        * S3にファイルを置いて、バッチでそのファイルを参照して処理する

      * ログなどの出力先

        * 定期的にS3にログを送る

      * 静的ウェブホスティング

        * 静的なウェブサイトをS3から公開

  CloudFront

    AWSにおける :term:`CDN` のサービス

  CDN

    * Content Delivery Network
    * 高速にコンテンツを配信するサービス
    * オリジンサーバ（元となる画像を配信するサーバ。今回の場合はS3）上にあるコンテンツを、
      世界中100箇所以上にあるエッジロケーションにコピーし、そこから配信を行う
    * 高速：ユーザから最も近いエッジサーバから画像を配信する
    * 効率的：エッジサーバでコンテンツのキャッシングを行うので、オリジンサーバに負荷をかけずに配信できる

  Certificate Manager

    証明書を発行・管理するためのAWSのサービス

  SSLサーバ証明書

    * Webサーバの持ち主が実在することを示す電子証明書
    * ブラウザとWebサーバ間で暗号化通信（https）をする時に必要

----
説明
----

インフラ設計における重要な観点
------------------------------

* 可用性：サービスを継続的に利用できるか（一番重要）
* 性能・拡張性：システムの性能が十分で、将来的においても拡張しやすいか
* 運用・保守性：運用と保守がしやすいか
* セキュリティ：情報が安全に守られているか
* 移行性：現行システムを他のシステムに移行しやすくなっているか

画像保存場所をWebサーバではなくS3にする理由
-------------------------------------------

* Webサーバのストレージが画像で一杯になるのを防ぐ
* HTMLへのアクセスと画像へのアクセスを分けることで負荷分散する
* サーバの台数を増やしやすくする（画像の保存場所を分離することで、:term:`スケールアウト` しやすくする）
* コンテンツ配信サービス（ :term:`CloudFront` ）から配信することで、画像配信を高速化できる

----
手順
----

* AWS側の準備

  * S3のバケット作成

    * AWS -> S3 -> バケット -> 「バケットを作成する」ボタンを押す

      * バケット名：グローバルでユニークな名称（例：aws-and-infra-wp-XXX）
      * リージョン：アジアパシフィック（東京）
      * 既存のバケットから設定をコピー：空

    * 「次へ」ボタンを押す

      * バージョニング：チェックなし
      * サーバアクセスのログ記録：チェックなし（本番環境ではチェックした方がよい）
      * Tags：空
      * オブジェクトレベルのログ記録：チェックなし
      * デフォルト暗号化：チェックなし
      * CloudWatchリクエストメトリクス：チェックなし

    * 「次へ」ボタンを押す

      * パブリックアクセスをすべてブロック：チェックなし
        （バケットとオブジェクトを外部公開したくない場合はチェックするが、今回は画像配信なのでチェックなし）
      * システムのアクセス許可の管理：アクセス権限を付与する

    * 「次へ」ボタンを押す
    * 「バケットを作成」ボタンを押す

  * S3の権限を持ったIAMユーザを作成

    * AWS -> IAM -> ユーザー -> 「ユーザーを追加」ボタンを押す

      * ユーザ名：任意（例：aws-and-infra-wpadmin）
      * アクセスの種類：「プログラムによるアクセス」にチェック
        （WordPressからS3にアクセスするため）

    * 「次のステップ」ボタンを押す

      * 「既存のポリシーを直接アタッチ」をクリック
      * ポリシーのフィルタに「S3」を入力
      * 「AmazonS3FullAccess」にチェックを入れる

    * 「次のステップ」ボタンを押す

      * タグの追加：空

    * 「次のステップ」ボタンを押す
    * 「ユーザーの作成」ボタンを押す
    * 「.csvのダウンロード」ボタンを押し、ファイルを保存する（失くさないこと）
      （WordPress から S3 にアクセスするために必要）
    * 「閉じる」ボタンを押す

* WordPressの設定

  * プラグインのインストール

    * WordPressの管理画面にログイン
    * プラグイン -> 「新規追加」ボタンを押す
    * 検索ボックスに「WP Offload Media」を入力し、WP Offload Mediaを今すぐインストール
    * 「有効化」ボタンを押す

  * 必要なライブラリをEC2にインストール

    * EC2にSSH接続し、インストール

      .. code-block:: console

        $ sudo yum install -y php-xml
        $ sudo yum install -y php-gd

    * インストールしたライブラリを読み込ますためにサーバを再起動させる

      .. code-block:: console

        $ sudo systemctl restart httpd.service

  * プラグインの設定

    * WordPressの管理画面をリロード
    * 設定 -> Offload Media をクリックし、以下をコピーする::

        define( 'AS3CF_SETTINGS', serialize( array(
            'provider' => 'aws',
            'access-key-id' => '********************',
            'secret-access-key' => '**************************************',
        ) ) );

    * EC2へのSSH接続画面にて、

      .. code-block:: console

        $ cd /var/www/html/

        $ ls
        index.php        wp-blog-header.php    wp-cron.php        wp-mail.php
        license.txt      wp-comments-post.php  wp-includes        wp-settings.php
        readme.html      wp-config.php         wp-links-opml.php  wp-signup.php
        wp-activate.php  wp-config-sample.php  wp-load.php        wp-trackback.php
        wp-admin         wp-content            wp-login.php       xmlrpc.php

        $ vim wp-config.php
        // 開いたファイルの最後の方のdefine(～);の最後に、上記でコピーした内容を貼り付ける
        // '**・・'の箇所は、S3の権限を持ったIAMユーザ作成時に保存したcsvファイルを開き、
        // Access key ID と Secret access key をコピーし貼り付ける

    * Offload Media の画面に戻り、画面をリロード

      * 「Enter bucket name」をクリックし、事前に作成したバケットを選択する
      * 「Save Selected Bucket」ボタンを押す

    * 設定確認画面にて

      * 最後の「Remove File From Server」をONに設定。
        これで、画像がサーバに保存されずにS3にのみ保存される
      * 「Save Changes」ボタンを押す

* 画像がS3に保存されることを確認

  * WordPressで画像を投稿する

    * WordPress管理画面 -> 投稿 -> 投稿一覧 -> Hello world!（何でもよい） -> 編集　をクリック
    * 「画像の追加」ボタンを押し、画像をアップロードする
    * 「更新」ボタンを押し、「投稿を表示」をクリック
    * アップロードした画像を右クリックし、メニューから「新しいタブで画像を開く」を選択
    * 画像のURLがs3～となっていればOK

  * S3のバケットを確認する

    * AWS -> S3 -> バケット -> aws-and-infra-wp-XXX（事前作成のバケット） をクリック
    * wp-content -> uploads -> ・・・に画像が保管されていることを確認

* CloudFrontから配信する

  * ディストリビューションの作成
    （ディストリビューションとは、CloudFrontの配信ルールのこと）

    * AWS -> CloudFront -> 「Create Distribution」ボタンを押す
    * Web -> 「Get Started」ボタンを押す

      * Origin Domain Name：オリジンサーバのS3名（例：aws-and-infra-wp-xxx.s3.amazonaws.com）
      * Origin Path：空欄（オリジンサーバの特定ディレクトリを指定する場合に使用）
      * Origin ID：デフォルト（例：S3-aws-and-infra-wp-xxx）
      * Restrict Bucket Access：No
        （画像にアクセスする際に、S3のURLではなくCloudFrontからのみアクセスしたい場合にYesを選択）
      * Origin Custom HeadersHeader Name：空欄
      * Default Cache Behavior Settings：全てデフォルトでOK
      * Distribution Settings：全てデフォルトでOK
        （Price Classが「Use All Edge Locations」となっていることのみ確認しておく）
      * 「Create Distribution」ボタンを押す

  * ここまでの設定では、WordPressの画像にアクセスするとCloudFrontのドメインのURLとなる。
    それでも特に問題はないが、画像のURLはそのWebページのドメインと同じであることが推奨されている。
    以降では、画像URLを独自ドメインのURLとするための設定を行う

* 独自ドメインから配信する

  * :term:`Certificate Manager` で :term:`SSLサーバ証明書` の発行

    * 作成されたディストリビューションのIDをクリックし、「Edit」ボタンを押す
    * Alternate Domain Names(CNAMEs)：独自ドメインの先頭にサブドメインを付ける（例：staic.xxx.work）
    * 「Request or Import a Certificate with ACM」ボタンを押す

      * ドメイン名：\*.独自ドメイン名（例：\*.xxx.work）
      * 「この証明書に別の名前を追加」ボタンを押す
      * 入力可能となったテキストボックス（追加の名前）に独自ドメイン名を記入（例：xxx.work）
        （追加の名前に独自ドメイン名を記載しないと、サブドメインに対する証明書しか発行されず、
        独自ドメイン本体に対しては証明書が発行されないこととなる）
      * 「次へ」ボタンを押す
      * 検証方法の選択：「DNS の検証」を選択
      * 「次へ」ボタンを押す
      * 「確認」ボタンを押す
      * 「確定とリクエスト」ボタンを押す
      * ドメイン左の▼をクリックし、表示された「Route53でのレコード作成」ボタンを押す

        * 「作成」ボタンを押す

      * もう一方のドメインについては不要（放置していたら「Route53でのレコード作成」ボタンが不活性化）
      * 「続行」ボタンを押す
      * 状況が「検証保留中」から「発行済み」に変わるまで待機する

  * CloudFrontのディストリビューションに独自ドメインを登録

    * CloudFrontのディストリビューション画面をリロードする
    * 作成されたディストリビューションのIDをクリックし、「Edit」ボタンを押す
    * Alternate Domain Names(CNAMEs)：独自ドメインの先頭にサブドメインを付ける（例：staic.xxx.work）
    * SSL Certificate：「Custom SSL Certificate」を選択し、「\*.xxx.work」を選ぶ
    * 「Yes, Edit」ボタンを押す

  * Route53で独自ドメインとCloudFrontドメインのCNAMEレコード（CNAMEは別名の意）を作成する

    * AWS -> Route53 -> ホストゾーン -> xxx.work をクリック
    * 「レコードセットの作成」ボタンを押す

      * 名前：static（上で設定した名称）
      * タイプ：CNAME
      * 値：xxxxx.cloudfront.net（CloudFront での Domain Name をコピペで入力）
      * 「作成」ボタンを押す

  * Offload Media で独自ドメインを登録する

    * WordPress管理画面にログイン -> 設定 -> Offload Media Lite をクリック

      * Custom Domain (CNAME)：ONにして、「static.xxx.work」を入力
      * 「Save Changes」ボタンを押す

----
補足
----

* S3のバケットに複数の画像が保管されるのを停止する

  * WordPressのデフォルト設定では、1枚の画像をアップロードすると、勝手に複数サイズの画像が自動生成される。
    これを停止するためには以下を設定する
  * WordPress管理画面 -> 設定 -> メディア で、全ての数値を0にして更新
  * http://xxx/wp-admin/options.php で「medium_large_size_w」を0にして更新
  * 参考：https://tabi-z.com/wordpress-autoresize-stop

【ELB】Webレイヤを冗長化する
============================

----
用語
----

.. glossary::

  プロビジョニング

    アクセス数などを予測して適切にリソースを準備すること

  スケールアップ

    * 個々の要素の性能を向上させる
    * ある程度の規模まではスケールアップがコストパフォーマンスがよいが、
      一定範囲を超えると悪くなる

  スケールアウト

    * 個々の要素の数を増やす（サーバの台数を増やす）
    * ある程度の規模を超えそうであれば、スケールアウトで対応する
    * 最低用意しておくべきがN+1構成、安心なのはN+2構成

  ELB

    * Elastic Load Balancing
    * AWS上の :term:`ロードバランサー`
    * 機能

      * 複数のEC2インスタンスに負荷分散する
      * 複数のアベイラリティゾーンにある複数のEC2インスタンスの中から正常なターゲットにのみ振り分ける（ヘルスチェック）

    * 特徴

      * ELB自体もスケーラブル（負荷に応じ自動でスケールアウト／スケールイン）
      * アベイラリティゾーンをまたがる構成のため障害に強い
      * ELBへの接続ポイントへのアクセスにはDNSを使用する
        （IPアドレスを用いると自動でスケールアウト／スケールインしないので要注意）
      * 安価な従量課金
      * マネージドサービスで運用が楽

  ロードバランサー

    各サーバにアクセスを振り分け、負荷を分散する装置

  ステートレス

    システムが現在の状態を表すデータなどを保持せず、入力の内容によってのみ出力が決定される方式。
    同じ入力に対する出力は常に同じになる。
    Webサーバでは、データなどをWebサーバが保持せず、DBサーバやS3に一元管理することで、
    Webサーバに冗長性を持たせても（Webサーバを複数台設置して負荷分散しても）必ず同じ応答にすることができる。

------------------------
稼働率を上げるための方法
------------------------

* 稼働率を上げるための基本的な考え方

  * 障害発生間隔を長くする
  * 平均復旧時間を短くする

* 稼働率を上げるための手法

  * 冗長化。これにより単一障害点（SPOF：Single Point Of Failure）をなくす

* 稼働率を上げるための具体的な方法（AWSを使う場合は2,3が対象）

  1. 要素単体の稼働率を高くする
  2. 要素を組み合わせて、全体の稼働率を高くする

    * Active-Active
    * Active-Standby (Hot/Warm/Cold)

  3. 負荷を適切な :term:`プロビジョニング` で回避する

    * :term:`スケールアップ`
    * :term:`スケールアウト`

------------------------------
サーバ構成のベストプラクティス
------------------------------

#. Webサーバ x 1、DBサーバ x 1 構成

  * 1台でサーバスペックが足りなくなったら、DBを別のサーバに切り出す
  * DBを外部公開しないよう設定できるのでセキュリティ面でも推奨

#. Webサーバ x 2、DBサーバ x 1 構成

  * Web側の性能が足りない時に、Webサーバを複数台使うことで、Webの冗長化と負荷分散を行う

#. Webサーバ x 2、DBサーバ x 2 構成

  * DBをマスタスレーブ方式にすることで、DBの冗長化を行う
  * スレーブDBにはマスタDBをレプリケーション（同期）し、マスタ障害時にスレーブに切り替える
  * AWSでは、「マスタスレーブ方式」のことを「マルチAZ」と呼ぶ

-------------------------
ELBを運用する際のポイント
-------------------------

* サーバをアベイラリティゾーンをまたがって配置する
* Webサーバは :term:`ステートレス` に構築する

----
手順
----

* AMIからEC2を作成

  * パブリックサブネットの作成

    * AWS -> VPC -> サブネット -> 「サブネットの作成」ボタンを押す

      * 名前タグ：aws-and-infra-public-subnet-1c
      * VPC：事前作成のVPCを選択
      * VPC CIDR：デフォルトのまま
      * アベイラリティゾーン：ap-northeast-1c
      * IPv4 CIDRブロック：任意のプライベートIPアドレス（10.0.11.0/24）
      * 「作成」ボタンを押す

    * 作成したサブネット -> ルートテーブル -> 「ルートテーブルの関連付けの編集」ボタンを押す

      * ルートテーブルID：事前作成のテーブルを選択（例：aws-and-infra-public-route）
      * 「保存」ボタンを押す

  * AMIの作成

    * AWS -> EC2 -> インスタンス から事前作成のEC2を選択する
    * アクション -> イメージ -> イメージの作成　を選択する

      * イメージ名：任意（例：aws-and-infra-web_XXX）
      * イメージの説明：任意（例：aws-and-infra-web_XXX）
      * 「イメージの作成」ボタンを押す

    * AWS -> EC2 -> AMI　を選択し、作成したイメージがあることを確認
      （ステータスが"pending"になっている）

  * AMIからEC2を作成

    * AWS -> EC2 -> AMI　を選択し、「起動」ボタンを押す

      * インスタンスタイプ：t2.micro
      * 「次のステップ」ボタンを押す
      * インスタンス数：1
      * 購入のオプション：チェックなし（常時インスタンスを起動したいためスポットインスタンスではない）
      * ネットワーク：事前作成のVPCを選択（例：aws-and-infra-vpc）
      * サブネット：事前作成のパブリックサブネットを選択（例：aws-and-infra-public-subnet-1c）
      * 自動割り当てパブリックIP：有効（インターネット経由でアクセスしたいため）
      * 配置グループ：チェックなし（複数インスタンスがある場合にインスタンス間のアクセスを高速化するために利用するもの）
      * キャパシティーの予約：なし（EC2インスタンスが必ず利用できるように予め予約するためのもの。追加料金が発生する）
      * ネットワークインターフェイス -> プライマリIP：任意（例：10.0.11.10）
      * 「次のステップ」ボタンを押す
      * 「次のステップ」ボタンを押す
      * 「タグを追加」ボタンを押す

        * キー：Name
        * 値：aws-and-infra-web

      * 「次のステップ」ボタンを押す
      * セキュリティグループの割り当て：既存（例：aws-and-infra-web）
      * 「確認と作成」ボタンを押す
      * 「起動」ボタンを押す

        * 「既存のキーペアの選択」を選択し
        * キーペアの選択：事前作成のキーペア（例：aws-and-infra-ssh-key）
        * チェックボックスにチェック

      * 「インスタンスの作成」ボタンを押す

  * EC2インスタンスの説明を追加する

    * EC2（10.0.10.10）へのSSH接続画面にて、

      .. code-block:: console

        $ cd /var/www/html/

        $ ls
        index.php        wp-blog-header.php    wp-cron.php        wp-mail.php
        license.txt      wp-comments-post.php  wp-includes        wp-settings.php
        readme.html      wp-config.php         wp-links-opml.php  wp-signup.php
        wp-activate.php  wp-config-sample.php  wp-load.php        wp-trackback.php
        wp-admin         wp-content            wp-login.php       xmlrpc.php

        $ sudo vim index.php
        // 開いたファイルの末尾に「echo '<p>sample 1a</p>';」を追加し上書き保存

      .. note::

        index.php上書き保存時に「E45 readonly option is set(add ! to override)」
        が表示されたら、vimのコマンドモードで「:w !sudo tee %」を実行し、「:q!」で終了させる

    * EC2（10.0.11.10）へのSSH接続画面にて、上記と同様に
      index.phpファイル末尾に「echo '<p>sample 1a</p>';」を追加し上書き保存する

* ELBの作成

  * ELBの作成

    * AWS -> EC2 -> ロードバランサー -> 「ロードバランサー」ボタンを押す
    * Application Load Balancer -> 「作成」ボタンを押す

      * 名前：任意（例：aws-and-infra-alb）
      * スキーム：「インターネット向け」にチェック
      * IPアドレスタイプ：ipv4
      * リスナー：全てデフォルトでOK
      * VPC：事前作成のVPCを選択（例：aws-and-infra-vpc）
      * アベイラリティゾーン：各々のパブリックサブネットを選択
      * 「次の手順」ボタンを押す
      * 「次の手順」ボタンを押す
      * セキュリティグループの割り当て：「新しいセキュリティグループを作成する」にチェック

        * セキュリティグループ名：任意（例：aws-and-infra-alb）
        * 説明：任意（例：aws-and-infra-alb）
        * タイプ：HTTP

      * 「次の手順」ボタンを押す
      * ターゲットグループ

        * ターゲットグループ：「新しいターゲットグループ」を選択
        * 名前：任意（例：aws-and-infra-web-tg）
        * ターゲットの種類：インスタンス
        * プロトコル：HTTP
        * ポート：80

      * ヘルスチェック

        * プロトコル：HTTP
        * パス：/（必ず応答を返すパスを設定すること）

      * ヘルスチェックの詳細設定

        * 正常のしきい値：2（デフォルト5から修正。後でヘルスチェック機能を確認したいため）
        * 間隔：10（デフォルト30から修正。後でヘルスチェック機能を確認したいため）

      * 「次の手順」ボタンを押す
      * ターゲットの登録

        * インスタンス：両インスタンスにチェック
        * 「登録済みに追加」ボタンを押す

      * 「次の手順」ボタンを押す
      * 「作成」ボタンを押す

    * 作成したロードバランサーの状態が「provicioning」から「active」となるまで待機する

  * ELBの動作を確認

    * 作成したロードバランサーを選択し、DNS名をコピーしブラウザでアクセスする
    * 一番下に「sample 1a」が表示されることを確認する
    * 画面を何度かリロードすると「sample 1c」が表示される

  * 独自ドメインからELBにアクセス

    * AWS -> Route53 -> ホストゾーン -> 既存のドメイン名「xxx.work」をクリック
    * Aレコードの独自ドメインを選択し編集する
      （現時点では、EC2インスタンスのグローバルIPアドレスが設定されている）

      * エイリアス：はい
      * エイリアス先：事前作成のロードバランサーを選択（例：aws-and-infra-alb）
      * 「レコードセットの保存」ボタンを押す

-----------
ELB動作確認
-----------

* 1aのEC2インスタンスが停止中の場合の動作を確認する
* EC2（10.0.10.10）にSSH接続し、Apacheを停止させる

  .. code-block:: console

    $ sudo systemctl stop httpd.service

* 独自ドメイン「xxx.work」にアクセスする
  → 画面をリロードしても「sample 1c」のみが表示される
* AWS -> EC2 -> ロードバランシング -> ターゲットグループ -> 事前作成のターゲットグループを選択 -> 下のターゲットタブをクリック
  → 登録済みターゲットの1aがunhealthyに、1cがhealthyとなっている
* EC2（10.0.10.10）にSSH接続し、Apacheを再開させる

  .. code-block:: console

    $ sudo systemctl start httpd.service

* 独自ドメイン「xxx.work」にアクセスし画面をリロードすると「sample 1a/1c」が交互に表示される

------------------------------------------
後片付け（無料枠を超過しないよう元に戻す）
------------------------------------------

* 1cをロードバランサーのターゲットから外す

  * AWC -> EC2 -> ロードバランシング -> ターゲットグループ -> ターゲット -> 編集　より1cを選択して削除

* 1cのEC2インスタンスを終了する

  * AWC -> EC2 -> インスタンス -> 1cインスタンス -> アクション -> インスタンスの状態 -> 終了　をクリック

【RDC】DBレイヤを冗長化する
===========================

----
説明
----

* RDSでは、マルチAZ機能を使ってマスタスレーブ構成を構築する
* マスタDBに障害が発生してスレープDBに切り替わった場合は、IPアドレスは変わるが、DBのエンドポイントは変わらない。
  よって、特に何もしなくても使い続けることができる。

----
手順
----

* AWS -> RDS -> データベース -> 作成済みDB -> 「変更」ボタンを押す

  * マルチAZ配置：はい
  * 「次へ」ボタンを押す
  * 変更のスケジュール：すぐに適用
  * 「DBインスタンスの変更」ボタンを押す

* 概要 -> 情報　が「変更中」から「利用可能」に変わるまで待機する
  （結構時間がかかる）

------------------------------------------
後片付け（無料枠を超過しないよう元に戻す）
------------------------------------------

上記手順の逆手順でマルチAZ配置をOFFする

【CloudWatch】システムを監視する
================================

----
用語
----

.. glossary::

  システム監視

    * システムを正常な状態に保てるよう、稼働状況やリソースを監視すること
    * 大別して、 :term:`死活監視` と :term:`メトリクス監視` の2種類がある

  しかつかんし（死活監視）

    * 正常にシステムが動作していることを確認

  メトリクス監視

    * パフォーマンスを定量的に確認
    * 指標を決め、指標が閾値以上・以下となっているかを把握

  CloudWatch

    * AWSサービスの監視やモニタリングができる監視サービス
    * AWSサービスのメトリクス（リソース状況）を監視する
    * メトリクスに対して閾値を登録し、その条件を満たしたら通知する（アラーム発生）
    * :term:`Amazon SNS` と組み合わせて使用する

  Amazon SNS

    * 通知サービス
    * Topicを作成することで、Publisherがメッセージを送信し、
      Subscriberが通知を受信するための通信チャネルとして機能する
    * PublisherとSubscriberを疎結合とし、Publisherなどの変更時の対応を簡単にするためのもの

----
説明
----

* 監視する際のポイント

  * 項目が多すぎると監視疲れし正常に監視できなくなる可能性がある。
    また、システムも利用状況が変わるので、都度調整が必要。
  * 基本的には、CPU、Memory、Disk、Networkの使用率・枯渇を監視項目に設定すればよい

----
手順
----

* 以降では、CPU使用率が60%を超えたら、
  EC2 → CloudWatch → SNS → ユーザの経路にて、Eメールを送信する監視を構築する
* CloudWatchのアラームを作成

  * CloudWatchのアラームを作成

    * AWS -> CloudWatch -> アラーム -> 「アラームの作成」ボタンを押す

      * メトリクスと条件の指定

        * 「メトリクスの選択」ボタンを押す
        * EC2 -> インスタンス別メトリクス　をクリックする
        * CPUUtilizationをチェックし、「メトリクスの選択」ボタンを押す
        * 期間：1分（デフォルト5分から変更。早く検知させるため）
        * CPUUtilizationが次の時：以上
        * よりも：60
        * 「次へ」ボタンを押す

      * アクションの設定

        * SNSトピックの選択：新しいトピックの作成
        * トピック名：任意（例：cloudwatch_alarms_topic）
        * 「トピックの作成」ボタンを押す
        * 「次へ」ボタンを押す

      * 名前と説明を追加

        * アラーム名：任意（例：aws-and-infra-ec2-cpu）
        * アラームの説明：任意（例：aws-and-infra-ec2-cpu）
        * 「次へ」ボタンを押す

      * 「アラームの作成」ボタンを押す
      * 通知先に指定したメアドにメールが届いているので、認証すること

  * SNSのトピックを確認

    * AWS -> SNS -> トピック　をクリックすると、上で作成したトピック（cloudwatch_alarms_topic）が表示される
    * AWS -> SNS -> サブスクリプション　をクリックすると、購読者のメアドが登録されている
    * トピックにサブスクリプションを追加していくことで、各購読者に通知する

* アラートを確認

  * "yes > /dev/null &" コマンドをEC2上で実行

    * EC2インスタンスにSSH接続する
    * EC2が高負荷となるようコマンドを実行する

      .. code-block:: console

        $ yes > /dev/null &

    * CPU使用率を確認

      .. code-block:: console

        $ top
        PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
        4838 ec2-user  20   0  114632    740    676 R 18.9  0.1   0:19.70 yes
        4839 ec2-user  20   0  114632    740    676 R 18.9  0.1   0:19.47 yes
        4836 ec2-user  20   0  114632    748    684 R 18.6  0.1   0:24.07 yes
        4837 ec2-user  20   0  114632    772    708 R 18.6  0.1   0:20.17 yes
        4840 ec2-user  20   0  114632    720    656 R 18.6  0.1   0:19.35 yes
        3924 apache    20   0  485256  44284   9036 S  6.0  4.4   1:26.69 httpd
            1 root      20   0  125560   5424   3968 S  0.0  0.5   0:02.64 systemd
            2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd

  * アラートが来ることを確認

    * AWS -> CloudWatch -> アラーム をクリックすると、アラーム状態となっており、メールを送信される

------------------------------------------
後片付け（無料枠を超過しないよう元に戻す）
------------------------------------------

* EC2インスタンスにSSH接続する
* yesコマンドを解除する

  .. code-block:: console

    // yesコマンドのプロセスを表示する
    $ ps aux | grep yes
    ec2-user  4836 19.7  0.0 114632   748 pts/0    R    12:47   1:50 yes
    ec2-user  4837 19.2  0.0 114632   772 pts/0    R    12:47   1:46 yes
    ec2-user  4838 19.1  0.0 114632   740 pts/0    R    12:47   1:45 yes
    ec2-user  4839 19.1  0.0 114632   740 pts/0    R    12:47   1:45 yes
    ec2-user  4840 19.1  0.0 114632   720 pts/0    R    12:47   1:45 yes
    ec2-user  4858  0.0  0.0 119416   988 pts/0    S+   12:57   0:00 grep --color=aut

    // yesコマンドのプロセスを停止する
    // 4836-4840：yesコマンドのプロセスID
    $ kill -9 4836
    $ kill -9 4837
    $ kill -9 4838
    $ kill -9 4839
    $ kill -9 4840

【IAM】アクセス権限を管理する
=============================

----
用語
----

.. glossary::

  IAM

    * AWSのサービスを利用するユーザ権限を管理するサービス
    * AWSリソースをセキュアに操作するために、認証・認可の仕組みを提供する
    * 各AWSリソースに対して別々のアクセス権限をユーザ毎に付与できる
    * AWS IAM自体の利用は無料

  IAMポリシー

    アクセス許可の定義。
    「どのAWSサービスの」「どのリソースに対して」「どんな操作を」「許可する（許可しない）」を定義

  IAMユーザ

    個々のアカウントのユーザ

  IAMグループ

    IAMユーザの集合。
    複数のユーザにアクセス許可を付与する作業を簡素化。
    グループに対してポリシーを設定できる

  IAMロール

    一時的にアクセスを許可したアカウントを発行できる。
    EC2やLambdaなどのAWSリソースに権限を付与するために使用

--------
作業内容
--------

* 作成するポリシー

  * DeveloperPolicy

    * EC2の全操作
    * RDSの全操作

  * DirectorPolicy

    * EC2の読み取り

* 作成するグループ

  * Developers
  * Directors

* 作成するユーザ

  * kume（Developers）
  * taguchi（Developers）
  * fukushima（Directors）

* 作成するロール

  * Web（AmazonS3FullAccess）

----
手順
----

* IAMポリシーを作成する

  * AWS -> IAM -> ポリシー -> 「ポリシーの作成」ボタンを押す
  * DeveloperPolicy

    * サービス：EC2
    * アクション：すべてのEC2アクション　にチェック
    * リソース：すべてのリソース　にチェック
    * 「さらにアクセス許可を追加する」をクリック
    * サービス：RDS
    * アクション：すべてのRDSアクション　にチェック
    * リソース：すべてのリソース　にチェック
    * 「ポリシーの確認」ボタンを押す
    * 名前：AwsAndInfraDeveloperPolicy
    * 説明：AwsAndInfraDeveloperPolicy
    * 「ポリシーの作成」ボタンを押す

  * DirectorPolicy

    * サービス：EC2
    * アクション：読み込み　にチェック
    * リソース：すべてのリソース　にチェック
    * 「ポリシーの確認」ボタンを押す
    * 名前：AwsAndInfraDirectorPolicy
    * 説明：AwsAndInfraDirectorPolicy
    * 「ポリシーの作成」ボタンを押す

* IAMグループを作成する

  * AWS -> IAM -> グループ -> 「新しいグループの作成」ボタンを押す
  * Developers

    * グループ名：AwsAndInfraDevelopers
    * 「次のステップ」ボタンを押す
    * ポリシー：AwsAndInfraDeveloperPolicy　にチェック
    * 「次のステップ」ボタンを押す
    * 「グループの作成」ボタンを押す

  * Directors

    * グループ名：AwsAndInfraDirectors
    * 「次のステップ」ボタンを押す
    * ポリシー：AwsAndInfraDirectorPolicy　にチェック
    * 「次のステップ」ボタンを押す
    * 「グループの作成」ボタンを押す

* IAMユーザを作成する

  * AWS -> IAM -> ユーザ -> 「ユーザを追加」ボタンを押す
  * Developers に所属するユーザ

    * ユーザ名：kume
    * 「別のユーザーの追加」をクリック
    * ユーザ名：taguchi
    * アクセスの種類：AWS マネジメントコンソールへのアクセス　にチェック
    * コンソールのパスワード：自動生成がよいが、今回はカスタムでpasswordとする
    * パスワードのリセットが必要：チェック入れる
    * 「次のステップ」ボタンを押す
    * アクセス許可の設定：ユーザーをグループに追加
    * グループ名：AwsAndInfraDevelopers　にチェック
    * 「次のステップ」ボタンを押す
    * 「次のステップ」ボタンを押す
    * 「ユーザーの作成」ボタンを押す
    * 「.csvのダウンロード」ボタンを押してファイルに保存する
    * 「閉じる」ボタンを押す

  * Directors に所属するユーザ

    * ユーザ名：fukushima
    * アクセスの種類：AWS マネジメントコンソールへのアクセス　にチェック
    * コンソールのパスワード：自動生成がよいが、今回はカスタムでpasswordとする
    * パスワードのリセットが必要：チェック入れる
    * 「次のステップ」ボタンを押す
    * アクセス許可の設定：ユーザーをグループに追加
    * グループ名：AwsAndInfraDirectors　にチェック
    * 「次のステップ」ボタンを押す
    * 「次のステップ」ボタンを押す
    * 「ユーザーの作成」ボタンを押す
    * 「.csvのダウンロード」ボタンを押してファイルに保存する
    * 「閉じる」ボタンを押す

* IAMロールを作成する前に、EC2からS3バケットリストを出力する

  * EC2へのSSH接続画面にて、

    .. code-block:: console

      // S3バケットリストの出力コマンドを実行すると、
      // エラーメッセージが出力される
      $ aws s3 ls
      Unable to locate credentials.
      You can configure credentials by running "aws configure".

* IAMロールを作成する

  * AWS -> IAM -> ロール -> 「ロールの作成」ボタンを押す

    * 信頼されたエンティティの種類を選択：AWSサービス
    * ユースケースの選択：EC2
    * 「次のステップ」ボタンを押す
    * ポリシー：AmazonS3FullAccess
    * 「次のステップ」ボタンを押す
    * 「次のステップ」ボタンを押す
    * ロール名：AwsAndInfraWeb
    * 「ロールの作成」ボタンを押す

* EC2インスタンスに作成したロールを割り当てる

  * AWS -> EC2 -> インスタンス -> aws-and-infra-web　にチェック
  * アクション -> インスタンスの設定 -> IAMロールの割り当て／置換　をクリック

    * IAM ロール：事前作成のロール（例：AwsAndInfraWeb）
    * 「適用」ボタンを押す
    * 「閉じる」ボタンを押す

* IAMロールを作成した後に、EC2からS3バケットリストを出力する

  * EC2へのSSH接続画面にて、

    .. code-block:: console

      // S3バケットリストの出力コマンドを実行する
      $ aws s3 ls
      2020-02-27 13:48:33 aws-and-infra-wp-tak

----
補足
----

* IAMのベストプラクティス

  * 個々人にIAMユーザを作成する（ユーザ毎に操作履歴が記録される）
  * ユーザをグループに所属させ、グループに権限を割り当てる
  * 権限は最小限にする
  * EC2インスタンスから実行するアプリケーションには、ロールを使用する
    （EC2インスタンスからAWSの別のサービスにアクセスする場合はロールを使用する）
  * 定期的に不要な認証情報を削除する（退職者のユーザなど）
