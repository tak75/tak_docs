===
AWS
===

概要
====

* サービスの数は世界最大
* リソースが柔軟
* 従量課金で使用した分だけ支払えばよい
* マネジメントコンソール
  
  AWSログイン時に表示される画面のこと

初期設定
=========

* CloudWatchで料金アラートを設定

  * 請求ダッシュボードで請求アラートを受け取れるように設定
  
    * マネジメントコンソール画面のメニューバーのアカウントより、マイ請求ダッシュボードを選択
    * 左メニューから、Billing の設定を選択し各々設定する

  * CloudWatchで料金アラートを設定

    * CloudWatch->請求->アラームの作成
    * メトリクス->請求->概算合計請求額を選択し、チェックボックスにチェックを入れる
    * メトリクスの選択ボタンを押下
    * 閾値金額を入力（例：10USD）
    * 次へボタンを押下
    * トピック名とメアドを入力し、トピックの作成ボタンを押下
    * 次へボタンを押下
    * 名前と説明を入力し、次へボタンを押下
    * アラームの作成ボタンを押下
    * 上記メアドに通知メールがあるので、"Confirm subscription"ボタンを押下

* マネジメントコンソール画面のメニューバーのアカウントより、マイアカウント->IAMユーザーによる請求情報へのアクセス有効化で「有効」に設定
* IAMで作業ユーザを作成
* CloudTrailで操作ログを記録

  * デフォルトで有効になっているが、保存期間は90日のみ
  * S3に操作ログを保存することで、永久的に保存できる
  * ただし、CloudTrail自体は無料だが、S3の料金は必要

操作
====

* 操作ログ閲覧方法

  * サービス->CloudTrail->最近のイベント を閲覧する
  * デフォルト保存期間は90日

【VPC】ネットワーク構築
========================

----
用語
----

* リージョン

  * AWSの各サービスが提供されている地域のことであり、各国に存在する
  * 基本的には、最新サービスはまずアメリカリージョンで提供され、それから他のリージョンに展開される

* アベイラビリティゾーン

  * 独立したデータセンターのこと
  * リージョン内にはアベイラビリティゾーンが複数あり、災害等で1つが使用できなくなっても他で代替できる

* VPC
  
  * Virtual Private Cloud
  * AWS上に仮想ネットワークを作成できるサービス
  * IPv4 アドレスの範囲を CIDRブロックの形式で指定する必要がある (例: 10.0.0.0/16)。
  * プライベートIPアドレスを使用することが推奨されている

    * クラスA：10.0.0.0～10.255.255.255 （10.0.0.0/8）
    * クラスB：172.16.0.0～172.31.255.255 （172.16.0.0/12）
    * クラスC：192.168.0.0～192.168.255.255 （192.168.0.0/16）

  * VPC作成後はIPv4 アドレス範囲を変更できないので、大きめに設定する

    * 大きさは /28から/16で、/16が推奨

* サブネット
  
  * VPCを細かく区切ったネットワークであり、プライベート／パブリックの設定が可能
  * これにより、サブネットAは公開するが、サブネットBは非公開とする、ことでセキュリティを高める運用が可能
  * アベイラビリティゾーンを分けて配置することで、物理的な場所を離すことで、災害に強くなるメリットもある
  * IPv4 アドレス範囲は/24が標準的

* IPアドレスの表記

  * CIDR表記（サイダー）

    * Classless Inter-Domain Routing
    * 例：192.168.128.0/24
    * "/"の後の数値24は、ネットワーク部が先頭から24ビット目までであることを表す

  * サブネットマスク表記

    * 例：192.168.128.0/255.255.255.0

* ルートテーブル

  * VPCと各サブネットに対して設定できる
  * ルートテーブルに設定している送信先IPアドレス範囲（CIDRブロック）以外の通信は破棄される
  * "0.0.0.0/0"で、ルートテーブルに設定しているIPアドレス範囲以外のIPアドレスを意味する

----
手順
----

* VPCを作成する

  * テナンシー：デフォルト
  * VPCを作成すると、自動的にメインルートテーブルとメインネットワークACLが作成される？

* サブネットを作成する

  * パブリックサブネットを作成する
  * プライベートサブネットを作成する
  * VPCには、上記で作成したVPCを選択する
  * ルートテーブルとネットワークACLを明示的に設定しないと、VPCに設定されたメインルートテーブルとメインネットワークACLが利用される

* ルーティングを設定する

  * インターネットゲートウェイを作成し、VPCにアタッチする

    * 作成したIGWを選択し、アクション->VPCにアタッチを選択

  * ルートテーブルを作成し、パブリックサブネットに紐づける

    * 作成したルートテーブルを選択し、サブネットの関連付け->サブネットの関連付けの編集より、紐づけるサブネットを選択し保存する
    * 作成したルートテーブルを選択し、ルート->ルートの編集->ルートの追加より、以下のルートを追加する
    
      * 送信先："0.0.0.0/0"
      * ターゲット：Internet Gateway->作成したIGW

----
補足
----

* 異なるシステムの場合はアカウントを分けること
* 同一システムで本番環境とステージング環境を分けたい場合は、同一アカウントでVPCとリージョンを分けるのがオススメ

【EC2】Webサーバ構築
=====================

----
用語
----

* EC2

  * Elastic Compute Cloud
  * AWSクラウド上の仮想サーバ
  * 数分で起動し、1時間または秒単位で従量課金
  * 無料枠内でいくつEC2インスタンスを作成してもよいが、全インスタンスの稼働時間が750時間／月を超えると課金される

  .. warning::
    
    EC2インスタンスを一旦終了すると、グローバルIPアドレスが変わるので要注意！

* AMI（アミイ）

  * Amazon Machine image
  * インスタンス起動に必要な情報が入ったOSのイメージ
  * サーバのテンプレートのようなもの
  * AWSやサードパーティがAMIを提供
  * カスタムAMIも作成可能
  * AMIから何台でもEC2インスタンスを起動可能

* インスタンスタイプ

  * サーバのスペックを定義したもの
  * インスタンスタイプにより、CPU、メモリ、ストレージ、ネットワーク帯域が異なる
  * 例：m5.xlarge

    * m
      
      * インスタンスファミリー
      * インスタンスの特徴を示す
      * 汎用的／CPU最適化／メモリ最適化／価格最適化／など

    * 5
    
      * インスタンス世代
      * 数値が大きいほど世代が新しい
      * 新しいものの方が性能／コストパフォーマンス／などがよい
      * 大きな数値を使用することが推奨

    * xlarge
    
      * インスタンスサイズ
      * CPU、メモリ、ネットワークのキャパシティを示す
      * small/large/xlarge/など

* ストレージ

  * サーバにくっつけるデータの保管場所
  * EC2には以下の2種類がある

    * EBS（Elastic Block Store）

      * 高い可能性と耐久性を持つストレージ
      * 他のインスタンスに付け替え可能
      * EBSの費用が別途発生
      * OSやDBなどの永続性と耐久性が必要なデータを置く

      .. note::

        無料利用枠では 30 GB までの EBS 汎用 (SSD) ストレージまたはマグネティックストレージを取得できる。

    * インスタンスストア

      * インスタンス専用の一時的なストレージ
      * 他のインスタンスに付け替えることはできない
      * 追加費用なし（無料）
      * 一時ファイル、キャッシュなど、失われても問題がないデータを置く

* SSH

  * サーバと自分の目の前のパソコンをセキュアにつなぐサービスのこと
  * 通信内容が暗号化された遠隔ログインシステム
  * 公開鍵認証にてログインする
  * サーバにログインする際は基本的にSSHを使用する
  * EC2にログインする際はSSHを使用する
  * SSH接続のツールはTeraTermなど複数あるが、rloginがオススメ

* 公開鍵認証

  * サーバ側が「公開鍵」を保有し、ユーザ側が「秘密鍵」を保有する
  * EC2作成時にダウンロードしたSSHキーペアが「秘密鍵」となる
  * ログインフロー

    #. PC → サーバ：ログインを要求
    #. サーバ → PC：適当なデータを公開鍵で暗号化し送信
    #. PC → サーバ：受信したデータを複合化し平文データを送信
    #. サーバ：元データとの一致を確認
    #. サーバ → PC：ログインを許可

  * ポート番号

    * ポート番号は、プログラムのアドレス
    * 同一コンピュータ内で通信を行うプログラムを識別する時に利用
    * ポート番号を決める方法は2種類ある

      * 標準で決められている番号

        * ウェルノウンポート番号と呼ばれる
        * ウェルノウンポート番号は0～1023
        * 例：SSHは22、SMTPは25、HTTPは80、HTTPSは443

      * 動的に決まる番号

        * サーバのポート番号は決まっている必要があるが、クライアントのポート番号は決まってなくてもよい
        * クライアントのポート番号は、OSが他のポート番号と被らないようにランダムに決める
        * 番号は49142～65535

----
手順
----

* EC2インスタンスを設置する

  * AMIの選択

    * EC2->インスタンス->インスタンスの作成を選択する
    * クイックスタート->Amazon Linux 2 AMIを選択し選択ボタンを押下する

  * インスタンスタイプの選択

    * 無料枠で利用できる"t2.micro"を選択し次のステップボタンを押下する

  * インスタンス詳細の設定

    * インスタンス数：1
    * 購入のオプション：チェックなし（常時インスタンスを起動したいためスポットインスタンスではない）
    * ネットワーク：作成したVPCを選択
    * サブネット：作成したパブリックサブネットを選択
    * 自動割り当てパブリックIP：有効（インターネット経由でアクセスしたいため）
    * 配置グループ：チェックなし（複数インスタンスがある場合にインスタンス間のアクセスを高速化するために利用するもの）
    * キャパシティーの予約：なし（EC2インスタンスが必ず利用できるように予め予約すると追加料金が発生するため）
    * IAMロール：なし（EC2インスタンスが他のAWSサービスと連携する際の権限を設定するもの）
    * シャットダウン動作：停止（終了時にEC2インスタンスを削除する必要がないため）
    * 終了保護の有効化：チェックなし（EC2インスタンスが誤って削除されることを防ぐためのもの。本番環境では利用する場合あり）
    * モニタリング：チェックなし（EC2インスタンスの監視周期を5分→1分にするためのもの。追加料金発生）
    * テナンシー：共有（ハードウェアを占有する際に利用するもの）
    * Elastic Inference：チェックなし（機械学習でGPUを使用する場合にコストパフォーマンスをよくするためのもの）
    * T2/T3無制限：チェックなし（T2/T3系インスタンスには留意点あり。
      CPU使用率にベースライン（CPU資料率10%）が設定されており、これ以下で運用されている場合はCPUクレジットが貯まっていく。
      アクセスが集中するなど、CPU使用率がベースラインを超えた場合は、バーストモードで動作し、CPUクレジットを消費していく。
      CPUクレジットが消費され尽くすと、バーストモードでは動作できなくなり負荷増となる。
      このバーストモードを無制限とするために利用される項目である。
      ただし、追加料金が発生する）
    * ネットワークインターフェイス->プライマリIP：例）10.0.10.10（
      パブリックIPアドレスだけでなく、プライベートIPアドレスを持たせることができる。
      パブリックサブネットのプライベートIPアドレスが10.0.10.0/24の場合、その範囲内で設定する）
    * 高度な詳細->ユーザーデータ：空欄（インスタンス起動時に実行するスクリプトを設定できる）

  * ストレージの追加

    * 新しいボリュームの追加はしない
    * サイズ：8GB
    * ボリュームタイプ：汎用SSD
    * 終了時に削除：チェックあり
    * 暗号化：暗号化なし

  * タグの追加

    * "タグを追加"ボタンを押下し、インスタンスの名前を設定する
    * キー：Name、値：インスタンス名

  * セキュリティグループの設定

    * セキュリティグループ名を設定する
    * タイプ、ソースはデフォルトのまま
    * ただし、ソースを0.0.0.0/0にすると、どこからでもSSH接続できるようになるので危険
    * 今回はとりあえずデフォルト（0.0.0.0/0）とする

  * SSHキーペアの設定

    * SSH接続で使用するキーのこと
    * 「新しいキーペアの作成」を選択
    * キーペア名を任意に入力し、「キーペアのダウンロード」ボタンを押下することで、"～～.pem"ファイルが作成される
    * このキーペアは後で作成することができないため、なくさないこと

* Apacheをインストールする

  * SSHでサーバにログイン
  * Apacheをインストール
   

* ファイアウォールを設定する

----
補足
----

* どのポート番号でどのプログラムが待ち受けているかを調べる

  .. code-block:: console

    // lsof：オープン中のファイルやそのファイルをオープンしているプロセスのリストを出力する
    //       "list open files" の略
    // -i：ネットワークソケットファイルを表示
    // -n：IPアドレスをホスト名に変換しない
    // -P：ポート番号をサービス名に変換しない
    // "LISTEN"：待ち受けているプロセスを示す。
    // "ESTABLISHED"：ソケット接続を確立しセッションを結んでいるプロセスを示す。
    $ sudo lsof -i -n -P
    COMMAND    PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
    rpcbind   2679      rpc    6u  IPv4  16789      0t0  UDP *:111 
    rpcbind   2679      rpc    7u  IPv4  16793      0t0  UDP *:727 
    rpcbind   2679      rpc    8u  IPv4  16794      0t0  TCP *:111 (LISTEN)
    rpcbind   2679      rpc    9u  IPv6  16795      0t0  UDP *:111 
    rpcbind   2679      rpc   10u  IPv6  16796      0t0  UDP *:727 
    rpcbind   2679      rpc   11u  IPv6  16797      0t0  TCP *:111 (LISTEN)
    chronyd   2702   chrony    1u  IPv4  17280      0t0  UDP 127.0.0.1:323 
    chronyd   2702   chrony    2u  IPv6  17281      0t0  UDP [::1]:323 
    dhclient  2910     root    6u  IPv4  17815      0t0  UDP *:68 
    dhclient  3032     root    5u  IPv6  18132      0t0  UDP [fe80::4f4:e7ff:fe7f:da0c]:546 
    master    3169     root   13u  IPv4  18980      0t0  TCP 127.0.0.1:25 (LISTEN)
    sshd      3388     root    3u  IPv4  20815      0t0  TCP *:22 (LISTEN)
    sshd      3388     root    4u  IPv6  20824      0t0  TCP *:22 (LISTEN)
    sshd     32416     root    3u  IPv4  56384      0t0  TCP 10.0.10.10:22->126.193.60.75:20586 (ESTABLISHED)
    sshd     32433 ec2-user    3u  IPv4  56384      0t0  TCP 10.0.10.10:22->126.193.60.75:20586 (ESTABLISHED)

