===================
Commandパターン
===================

適用ケース
==========

* ボタンに割り当てる機能を任意に変更できるようにしたい場合。
* ボタン操作をアンドゥしたい場合。
* リクエストをキューイングしたい場合。
* リクエストをロギングしクラッシュ後に復旧させたい場合。（execute()実行の都度、コマンドオブジェクトをディスクに保管しクラッシュ後に順にロードし実行）

定義
====

Command パターンは、リクエストをオブジェクトとしてカプセル化し、その結果、
他のオブジェクトを異なるリクエスト、キュー、またはログリクエストでパラメータ化でき、アンドゥ可能な操作もサポートする。

説明
====

* Command パターンは、リクエストを行うオブジェクトとその実行方法を知っているオブジェクトを分離する。
* コマンドオブジェクトがこの分離の中核であり、レシーバをアクション（または一連のアクション）でカプセル化する。
* インボーカは、コマンドオブジェクトの execute() メソッドを呼び出すことで、リクエストを実行する。execute() メソッドはレシーバのアクションを起動する。
* インボーカはコマンドでパラメータ化することができ、実行時に動的にパラメータ化することさえできる。
* コマンドは、オブジェクトを最後の execute() メソッドの呼び出し前の状態に回復するアンドゥメソッドを実装することで、アンドゥをサポートできる。
* マクロコマンドはコマンドの簡単な拡張であり、複数のコマンドを起動できる。同様に、マクロコマンドは undo() を簡単にサポートできる。
* 実際には、「賢い」コマンドオブジェクトが、レシーバに委譲しないでリクエスト自体を実装することも珍しいことではない。
* コマンドを使用して、ロギングやトランザクション型システムを実装することもできる。

図面
====

クラス図の例を :numref:`Commandパターン_クラス図` に、シーケンス図を :numref:`Commandパターン_シーケンス図` に各々示す。

.. figure:: images/Commandパターン_クラス図.png
   :scale: 85%
   :name: Commandパターン_クラス図

   Commandパターン クラス図

.. figure:: images/Commandパターン_シーケンス図.png
   :scale: 85%
   :name: Commandパターン_シーケンス図

   Commandパターン シーケンス図

