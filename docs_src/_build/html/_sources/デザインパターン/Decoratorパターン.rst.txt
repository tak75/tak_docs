===================
Decoratorパターン
===================

適用ケース
==========

* 基盤となるクラスのコードを全く変更することなく、オブジェクトに新しい責務を与えたい場合に有効。
* ラッパーである。

定義
====

Decorator パターンはオブジェクトに付加的な責務を動的に付与する。
デコレータは、サブクラス化の代替となる、柔軟な機能拡張手段を提供する。

説明
====

* インタフェースを変更せずに、責務を追加する。
* 自分自身と同じ型のオブジェクトを参照するクラス構造をとることで、ベースとなるオブジェクトを無限にラップすることができる。
* ベースとなるオブジェクトが返す値に対して、ラップされた全オブジェクトが値を加算していく形で値を取得できる。
* JAVAのI/Oクラスに用いられている構造である。FileInputStreamをベースにしてラップされている。

図面
====

クラス図の例を :numref:`Decoratorパターン_クラス図` に、シーケンス図を :numref:`Decoratorパターン_シーケンス図` に各々示す。

.. figure:: images/Decoratorパターン_クラス図.png
   :scale: 85%
   :name: Decoratorパターン_クラス図

   Decoratorパターン クラス図

.. figure:: images/Decoratorパターン_シーケンス図.png
   :scale: 85%
   :name: Decoratorパターン_シーケンス図

   Decoratorパターン シーケンス図

