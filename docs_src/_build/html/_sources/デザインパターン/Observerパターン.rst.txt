===================
Observerパターン
===================

適用ケース
==========

* あるクラス内での変化を他の複数のクラスに通知する際に有効。

定義
====

Observer パターンは、オブジェクト間の１対多の依存関係を定義し、あるオブジェクトの状態が変化すると、それに依存しているすべてのオブジェクトが自動的に通知され更新されるようにする。

説明
====

* サブジェクト（発行者）に複数のオブザーバ（購読者）を登録する。
* サブジェクトの状態が変化すると、登録されている全てのオブザーバに対して、オブザーバは状態が変化したことを通知する。
* 通知のみを行いオブザーバ側からサブジェクトに対して最新の状態を問い合わせる仕様としてもよいし（プル型実装）、
  通知時に最新の状態をオブザーバに渡す仕様としてもよい（プッシュ型実装）。
* サブジェクトとオブザーバは、お互いについてほとんど知る必要はない（インタフェースさえ知っておけばよい）。
* 登録は任意に解除することが可能。
* 通知順序に関しては当てにしてはいけない（特定の通知順になるとは限らない）。

図面
====

クラス図を :numref:`Observerパターン_クラス図` に、シーケンス図を :numref:`Observerパターン_シーケンス図` に各々示す。

.. figure:: images/Observerパターン_クラス図.png
   :scale: 85%
   :name: Observerパターン_クラス図

   Observerパターン クラス図

.. figure:: images/Observerパターン_シーケンス図.png
   :scale: 85%
   :name: Observerパターン_シーケンス図

   Observerパターン シーケンス図

補足
====
以下の理由により、プッシュ型実装よりプル型実装の方が適切であると考えられている。

* 新たに追加するオブザーバのために受け渡す状態を追加する可能性がある場合、プッシュ型では全てのオブザーバの実装を修正する必要があるが、プル型では不要。
* サブジェクトが多くの状態を保持している場合、プッシュ型では全ての状態を受取るためのオブザーバの実装が必要となるが、プル型では自分が必要な状態のみを問い合わせればよいため効率がよい。