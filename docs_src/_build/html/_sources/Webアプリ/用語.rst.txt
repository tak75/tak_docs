====
用語
====

.. glossary::

  SocketIO
    WebSocketを含むリアルタイムWeb技術を簡単に扱うことができるライブラリ

  WebSocket
    リアルタイムWeb技術の一種であり、リアルタイムかつ双方向な通信を実現するプロトコル。
    WebSocket通信では、コネクション確立時にHTTPからWebSocketへプロトコルを切り替える。
    1度コネクションが確立されると、「ws:」または「wss:」から始まるURIスキーム上でクライアント〜サーバ間のデータのやりとりを行う。

  Kafka
    マイクロサービス間の非同期通信に利用。TCPプロトコル

  NoSQL（Not Only SQL）
    SQL言語を使わずにデータの操作ができるデータベース。
    Key-Value型データベースを指して言うことが多い。
    これは、Key-Valueストア（KVS）とも呼ばれる。
    Key-Valueストア以外には、XMLやJSONなどがよく利用されている。
    大量のデータを保持することに向いている。
    データの参照には適しているが、データの更新や削除には向いていないので、取っておく必要はあるけど、普段頻繁に利用しないデータには最適。

  トランザクション処理
    処理の一貫性を保証するために、関連する一連の処理全体を一つの処理単位として管理する仕組み。
    つまり同時に処理が行われることを防げる。
    たとえば、ECサイトでものを買うとき、在庫が一点しかないのに、AさんとBさんが同じタイミングで購入ボタンを押した場合、両方に購入できたらダメ。
    こういう一貫性を保つ必要があるデータにトランザクションは必須。

  Spring Framework
    JavaでWEBアプリ開発を行う場合に使用するフレームワーク。

    * 変更に強い：依存性のあるプログラムは外部から取り入れるため、1つ1つのプログラムを独立させやすい。
    * テストが簡単：「Spring MVC Test」という専用のテストプログラムを使うことができる。
      無事に一連の処理を終えるかどうかのテスト（結合テスト）が可能。
    * 拡張性が高い：フレームワークの基本的な機能の大部分が「インターフェース」として提供されており、必要な機能だけを外部から使うことができる。（ユーザ非表示のメール送信なども可）
    * 保守性が高い：「AOP（Aspect Oriented Programming）」を用いることができる
    * 再利用性が高い：

  AOP（Aspect Oriented Programming）
    コンピュータプログラムの特定の振る舞いを「アスペクト」と呼ばれる機能単位として分離して記述し、プログラム中の様々な対象に適用できるようにする手法。
    既存のオブジェクト指向プログラミング言語や開発環境に補助的に導入されることが多い。
    例えば、クラスには「本質的な処理」のみを書いて、「本質的ではない処理（共通化出来る処理）」を別に書くといった具合。
    主に必要となる処理とそうではない処理を分けることで、コードをわかりやすくする効果がある。

  リフレクション
    クラス名やメソッド名の文字列から、クラスのインスタンス生成やインスタンスのメソッド呼び出しを行う技術。
    リフレクションを使って記述すれば、後はクラス名やメソッド名など変数に代入する値を変更するだけで異なるクラスやメソッドを実行することができる。
    プログラムをテストする場合などで使用すると便利。

  ReactJS
    React はフロントエンドの UI のパーツ（構成部品）を作るためのライブラリ

  Redux
    Redux は、JavaScript アプリ内コンポーネントの状態を管理するコンテナモデル
