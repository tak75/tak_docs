===
AWS
===

概要
====

* サービスの数は世界最大
* リソースが柔軟
* 従量課金で使用した分だけ支払えばよい
* マネジメントコンソール

  AWSログイン時に表示される画面のこと

初期設定
=========

* CloudWatchで料金アラートを設定

  * 請求ダッシュボードで請求アラートを受け取れるように設定

    * マネジメントコンソール画面のメニューバーのアカウントより、マイ請求ダッシュボードを選択
    * 左メニューから、Billing の設定を選択し各々設定する

  * CloudWatchで料金アラートを設定

    * CloudWatch -> 請求 -> アラームの作成
    * メトリクス -> 請求 -> 概算合計請求額を選択し、チェックボックスにチェックを入れる
    * メトリクスの選択ボタンを押下
    * 閾値金額を入力（例：10USD）
    * 次へボタンを押下
    * トピック名とメアドを入力し、トピックの作成ボタンを押下
    * 次へボタンを押下
    * 名前と説明を入力し、次へボタンを押下
    * アラームの作成ボタンを押下
    * 上記メアドに通知メールがあるので、"Confirm subscription"ボタンを押下

* マネジメントコンソール画面のメニューバーのアカウントより、マイアカウント -> IAMユーザーによる請求情報へのアクセス有効化で「有効」に設定
* IAMで作業ユーザを作成
* CloudTrailで操作ログを記録

  * デフォルトで有効になっているが、保存期間は90日のみ
  * S3に操作ログを保存することで、永久的に保存できる
  * ただし、CloudTrail自体は無料だが、S3の料金は必要

操作
====

* 操作ログ閲覧方法

  * サービス -> CloudTrail -> 最近のイベント を閲覧する
  * デフォルト保存期間は90日

【VPC】ネットワーク構築
========================

----
用語
----

.. glossary::

  リージョン

    * AWSの各サービスが提供されている地域のことであり、各国に存在する
    * 基本的には、最新サービスはまずアメリカリージョンで提供され、それから他のリージョンに展開される

  アベイラビリティゾーン

    * 独立したデータセンターのこと
    * リージョン内にはアベイラビリティゾーンが複数あり、災害等で1つが使用できなくなっても他で代替できる

  VPC

    * Virtual Private Cloud
    * AWS上に仮想ネットワークを作成できるサービス
    * IPv4 アドレスの範囲を CIDRブロックの形式で指定する必要がある (例: 10.0.0.0/16)。
    * プライベートIPアドレスを使用することが推奨されている

      * クラスA：10.0.0.0～10.255.255.255 （10.0.0.0/8）
      * クラスB：172.16.0.0～172.31.255.255 （172.16.0.0/12）
      * クラスC：192.168.0.0～192.168.255.255 （192.168.0.0/16）

    * VPC作成後はIPv4 アドレス範囲を変更できないので、大きめに設定する

      * 大きさは /28から/16で、/16が推奨

  サブネット

    * VPCを細かく区切ったネットワークであり、プライベート／パブリックの設定が可能
    * これにより、サブネットAは公開するが、サブネットBは非公開とする、という設定が可能となり、
      セキュリティを高める運用が可能
    * アベイラビリティゾーンを分けて配置することで、物理的な場所を離し、災害に強くなるメリットもある
    * IPv4 アドレス範囲は/24が標準的

  IPアドレスの表記

    * CIDR表記（サイダー）

      * Classless Inter-Domain Routing
      * 例：192.168.128.0/24
      * "/"の後の数値24は、ネットワーク部が先頭から24ビット目までであることを表す

    * サブネットマスク表記

      * 例：192.168.128.0/255.255.255.0

  ルートテーブル

    * VPCと各サブネットに対して設定できる
    * ルートテーブルに設定している送信先IPアドレス範囲（CIDRブロック）以外の通信は破棄される
    * "0.0.0.0/0"で、ルートテーブルに設定しているIPアドレス範囲以外のIPアドレスを意味する

----
手順
----

* VPCを作成する

  * テナンシー：デフォルト
  * VPCを作成すると、自動的にメインルートテーブルとメインネットワークACLが作成される？

* サブネットを作成する

  * パブリックサブネットを作成する

    * 名前タグ：任意（aws-and-infra-public-subnet-1a）
    * VPC：事前作成のVPCを選択
    * VPC CIDR：デフォルトのまま
    * アベイラリティゾーン：任意（ap-northeast-1a）
    * IPv4 CIDRブロック：任意のプライベートIPアドレス（10.0.10.0/24）

  * プライベートサブネットを作成する

    * 名前タグ：任意（aws-and-infra-private-subnet-1a）
    * VPC：事前作成のVPCを選択
    * VPC CIDR：デフォルトのまま
    * アベイラリティゾーン：任意（ap-northeast-1a）
    * IPv4 CIDRブロック：任意のプライベートIPアドレス（10.0.20.0/24）

  * ルートテーブルとネットワークACLを明示的に設定しないと、VPCに設定されたメインルートテーブルとメインネットワークACLが利用される

* ルーティングを設定する

  * インターネットゲートウェイを作成し、VPCにアタッチする

    * 作成したIGWを選択し、アクション -> VPCにアタッチを選択

  * ルートテーブルを作成し、パブリックサブネットに紐づける

    * 作成したルートテーブルを選択し、サブネットの関連付け -> サブネットの関連付けの編集より、紐づけるサブネットを選択し保存する
    * 作成したルートテーブルを選択し、ルート->ルートの編集 -> ルートの追加より、以下のルートを追加する

      * 送信先："0.0.0.0/0"
      * ターゲット：Internet Gateway -> 作成したIGW

----
補足
----

* 異なるシステムの場合はアカウントを分けること
* 同一システムで本番環境とステージング環境を分けたい場合は、同一アカウントでVPCとリージョンを分けるのがオススメ

【EC2】Webサーバ構築
=====================

----
用語
----

.. glossary::

  EC2

    * Elastic Compute Cloud
    * AWSクラウド上の仮想サーバ
    * 数分で起動し、1時間または秒単位で従量課金
    * 無料枠内でいくつEC2インスタンスを作成してもよいが、全インスタンスの稼働時間が750時間／月を超えると課金される

    .. warning::

      EC2インスタンスを一旦終了すると、グローバルIPアドレスが変わるので要注意！
      ただし、Elastic IPアドレス（条件により課金）を使うとEC2を削除するまでIPアドレスを固定することが可能。

  AMI（アミイ）

    * Amazon Machine image
    * インスタンス起動に必要な情報が入ったOSのイメージ
    * サーバのテンプレートのようなもの
    * AWSやサードパーティがAMIを提供
    * カスタムAMIも作成可能
    * AMIから何台でもEC2インスタンスを起動可能

  インスタンスタイプ

    * サーバのスペックを定義したもの
    * インスタンスタイプにより、CPU、メモリ、ストレージ、ネットワーク帯域が異なる
    * 例：m5.xlarge

      * m

        * インスタンスファミリー
        * インスタンスの特徴を示す
        * 汎用的／CPU最適化／メモリ最適化／価格最適化／など

      * 5

        * インスタンス世代
        * 数値が大きいほど世代が新しい
        * 新しいものの方が性能／コストパフォーマンス／などがよい
        * 大きな数値を使用することが推奨

      * xlarge

        * インスタンスサイズ
        * CPU、メモリ、ネットワークのキャパシティを示す
        * small/large/xlarge/など

  ストレージ

    * サーバにくっつけるデータの保管場所
    * EC2には以下の2種類がある

      * EBS（Elastic Block Store）

        * 高い可能性と耐久性を持つストレージ
        * 他のインスタンスに付け替え可能
        * EBSの費用が別途発生
        * OSやDBなどの永続性と耐久性が必要なデータを置く

        .. note::

          無料利用枠では 30 GB までの EBS 汎用 (SSD) ストレージまたはマグネティックストレージを取得できる。

      * インスタンスストア

        * インスタンス専用の一時的なストレージ
        * 他のインスタンスに付け替えることはできない
        * 追加費用なし（無料）
        * 一時ファイル、キャッシュなど、失われても問題がないデータを置く

  SSH

    * サーバと自分の目の前のパソコンをセキュアにつなぐサービスのこと
    * 通信内容が暗号化された遠隔ログインシステム
    * 公開鍵認証にてログインする
    * サーバにログインする際は基本的にSSHを使用する
    * EC2にログインする際はSSHを使用する
    * SSH接続のツールはTeraTermなど複数あるが、rloginがオススメ

  こうかいかぎにんしょう（公開鍵認証）

    * サーバ側が「公開鍵」を保有し、ユーザ側が「秘密鍵」を保有する
    * EC2作成時にダウンロードしたSSHキーペアが「秘密鍵」となる
    * ログインフロー

      #. PC → サーバ：ログインを要求
      #. サーバ → PC：適当なデータを公開鍵で暗号化し送信
      #. PC → サーバ：受信したデータを複合化し平文データを送信
      #. サーバ：元データとの一致を確認
      #. サーバ → PC：ログインを許可

  ポート番号

    * ポート番号は、プログラムのアドレス
    * 同一コンピュータ内で通信を行うプログラムを識別する時に利用
    * ポート番号を決める方法は2種類ある

      * 標準で決められている番号

        * ウェルノウンポート番号と呼ばれる
        * ウェルノウンポート番号は0～1023
        * 例：SSHは22、SMTPは25、HTTPは80、HTTPSは443

      * 動的に決まる番号

        * サーバのポート番号は決まっている必要があるが、クライアントのポート番号は決まってなくてもよい
        * クライアントのポート番号は、OSが他のポート番号と被らないようにランダムに決める
        * 番号は49142～65535

  Apache

    HTTPリクエストがあると、それに対してレスポンスを返しWebページを表示する、Webサーバのソフトウェア。

  ファイアウォール

    * ファイアウォールとは、ネットワークを不正アクセスから守るために、「通してよい通信だけを通して、それ以外は通さない」機能の総称
    * AWSでは、EC2インスタンスに対して設定する **セキュリティグループ** がファイアウォールの役割を担っている。

  Elastic IPアドレス

    * 固定グローバルIPアドレスを取得し、インスタンスに付与できるサービス
    * インスタンスを削除するまで、ずっとそのIPアドレスを使用することができる
    * Elastic IPアドレスは、EC2インスタンスに関連付けられていて、そのインスタンスが起動中であれば無料。
      逆に、そうでないと課金される（インスタンスが停止中は課金される）

----
手順
----

* EC2インスタンスを設置する

  * AMIの選択

    * EC2 -> インスタンス -> インスタンスの作成を選択する
    * クイックスタート -> Amazon Linux 2 AMIを選択し選択ボタンを押下する

  * インスタンスタイプの選択

    * 無料枠で利用できる"t2.micro"を選択し次のステップボタンを押下する

  * インスタンス詳細の設定

    * インスタンス数：1
    * 購入のオプション：チェックなし（常時インスタンスを起動したいためスポットインスタンスではない）
    * ネットワーク：事前作成のVPCを選択
    * サブネット：事前作成のパブリックサブネットを選択
    * 自動割り当てパブリックIP：有効（インターネット経由でアクセスしたいため）
    * 配置グループ：チェックなし（複数インスタンスがある場合にインスタンス間のアクセスを高速化するために利用するもの）
    * キャパシティーの予約：なし（EC2インスタンスが必ず利用できるように予め予約すると追加料金が発生するため）
    * IAMロール：なし（EC2インスタンスが他のAWSサービスと連携する際の権限を設定するもの）
    * シャットダウン動作：停止（終了時にEC2インスタンスを削除する必要がないため）
    * 終了保護の有効化：チェックなし（EC2インスタンスが誤って削除されることを防ぐためのもの。本番環境では利用する場合あり）
    * モニタリング：チェックなし（EC2インスタンスの監視周期を5分→1分にするためのもの。追加料金発生）
    * テナンシー：共有（ハードウェアを占有する際に利用するもの）
    * Elastic Inference：チェックなし（機械学習でGPUを使用する場合にコストパフォーマンスをよくするためのもの）
    * T2/T3無制限：チェックなし（T2/T3系インスタンスには留意点あり。
      CPU使用率にベースライン（CPU資料率10%）が設定されており、これ以下で運用されている場合はCPUクレジットが貯まっていく。
      アクセスが集中するなど、CPU使用率がベースラインを超えた場合は、バーストモードで動作し、CPUクレジットを消費していく。
      CPUクレジットが消費され尽くすと、バーストモードでは動作できなくなり負荷増となる。
      このバーストモードを無制限とするために利用される項目である。
      ただし、追加料金が発生する）
    * ネットワークインターフェイス -> プライマリIP：例）10.0.10.10（
      パブリックIPアドレスだけでなく、プライベートIPアドレスを持たせることができる。
      パブリックサブネットのプライベートIPアドレスが10.0.10.0/24の場合、その範囲内で設定する）
    * 高度な詳細 -> ユーザーデータ：空欄（インスタンス起動時に実行するスクリプトを設定できる）

  * ストレージの追加

    * 新しいボリュームの追加はしない
    * サイズ：8GB
    * ボリュームタイプ：汎用SSD
    * 終了時に削除：チェックあり
    * 暗号化：暗号化なし

  * タグの追加

    * "タグを追加"ボタンを押下し、インスタンスの名前を設定する
    * キー：Name、値：インスタンス名

  * セキュリティグループの設定

    * セキュリティグループ名を設定する
    * タイプ、ソースはデフォルトのまま
    * ただし、ソースを0.0.0.0/0にすると、どこからでもSSH接続できるようになるので危険
    * 今回はとりあえずデフォルト（0.0.0.0/0）とする

  * SSHキーペアの設定

    * SSH接続で使用するキーのこと
    * 「新しいキーペアの作成」を選択
    * キーペア名を任意に入力し、「キーペアのダウンロード」ボタンを押下することで、"～～.pem"ファイルが作成される

    .. warning::

      このキーペアは後で作成することができないため、必ずEC2インスタンス作成時に作成し、なくさないこと。

* Apacheをインストールする

  * SSHでサーバにログイン

    * 接続先はEC2インスタンスの「IPv4 パブリック IP」である。
      このアドレスはインスタンスの再起動の都度変わるので確認すること。
    * ユーザ名を"ec2-user"とし、上記で作成したSSHキーペアを読み込ませる。

  * Apacheをインストール

    * パッケージを更新する

      .. code-block:: console

        // yum：Linuxのパッケージ管理ツール。"yum update"でyumが管理する全パッケージを更新する。
        // -y："Yes"オプション。全パッケージの更新を"Yes"にする。付けないと都度Yes/Noを聞かれる
        $ sudo yum update -y

    * Apacheをインストールする

      .. code-block:: console

        // httpd：Apacheを構成する実行ファイル
        $ sudo yum -y install httpd

    * Apacheを起動させる

      .. code-block:: console

        // httpd.service：Apacheのこと
        $ sudo systemctl start httpd.service

    * Apacheが起動しているか確認する1（Apacheのステータスを確認）

      .. code-block:: console

        $ sudo systemctl status httpd.service
        ● httpd.service - The Apache HTTP Server
          Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
          Active: active (running) since Tue 2020-02-11 13:18:43 UTC; 33s ago
            Docs: man:httpd.service(8)
        Main PID: 21785 (httpd)
          Status: "Total requests: 0; Idle/Busy workers 100/0;Requests/sec: 0; Bytes served/sec:   0 B/sec"
          CGroup: /system.slice/httpd.service
                  tq21785 /usr/sbin/httpd -DFOREGROUND
                  tq21786 /usr/sbin/httpd -DFOREGROUND
                  tq21787 /usr/sbin/httpd -DFOREGROUND
                  tq21788 /usr/sbin/httpd -DFOREGROUND
                  tq21789 /usr/sbin/httpd -DFOREGROUND
                  mq21790 /usr/sbin/httpd -DFOREGROUND

    * Apacheが起動しているか確認する2（全プロセスを確認）

      .. code-block:: console

        // ps：プロセスを表示するコマンド
        // -ax：全てのプロセスを表示するオプション
        // u：CPUやメモリ使用率を付けて表示するオプション
        $ ps -axu
        USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
        ・・ 省略 ・・
        apache   21786  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/httpd
        apache   21787  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/httpd
        apache   21788  0.0  0.6 495156  6520 ?        Sl   13:18   0:00 /usr/sbin/httpd
        apache   21789  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/httpd
        apache   21790  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/httpd
        ec2-user 21839  0.0  0.3 164364  3900 pts/0    R+   13:22   0:00 ps -axu

    * Apacheが起動しているか確認する3（Apacheのプロセスを確認）

      .. code-block:: console

        // |：パイプライン。左のコマンドの実行結果を右のコマンドに渡す
        // grep：引数の文字列を検索して表示する
        $ ps -axu | grep httpd
        root     21785  0.0  0.9 257372  9716 ?        Ss   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        apache   21786  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        apache   21787  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        apache   21788  0.0  0.6 495156  6520 ?        Sl   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        apache   21789  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        apache   21790  0.0  0.6 298484  6512 ?        Sl   13:18   0:00 /usr/sbin/http  -DFOREGROUND
        ec2-user 21842  0.0  0.0 119416   920 pts/0    S+   13:27   0:00 grep --color=auto httpd

    * Apacheをサーバ起動に合わせて自動起動するよう設定する

      .. code-block:: console

        $ sudo systemctl enable httpd.service

    * 自動起動設定となったか確認する

      .. code-block:: console

        $ sudo systemctl is-enabled httpd.service
        enabled

* ファイアウォールを設定する

  * 現時点では、パブリックサブネットへのアクセスは、ポート22番（SSH接続）への通信のみOKの状態。
  * HTTPリクエストを通すために、セキュリティグループのポート80番を開ける。セキュリティグループのインバウンド設定にて、以下のルールを追加する

    * タイプ：HTTP
    * プロトコル：TCP
    * ポート範囲：80
    * ソース：任意の場所

* Elastic IPアドレスを取得しEC2インスタンスに関連付ける

  * AWS -> EC2 -> Elastic IP -> 「Elastic IPアドレスの割り当て」ボタンをクリック
  * 「割り当て」ボタンをクリック
  * 確保したIPアドレスを選択し、Actions -> Elastic IPアドレスの関連付けを選択
  * Elastic IPアドレスの関連付けにて以下を設定し、「関連付け」ボタンを押す

    * リソースタイプ：「インスタンス」にチェック
    * インスタンス：事前作成のEC2インスタンスを選択
    * プライベートIPアドレス：上記EC2インスタンスに設定されたプライベートIPアドレスを選択
    * 再関連付け：チェックなし

  .. warning:: EC2インスタンスを停止すると課金されるため、インスタンスを停止される場合は、事前にElastic IPアドレスを解放すること。

----
補足
----

* どのポート番号でどのプログラムが待ち受けているかを調べる

  .. code-block:: console

    // lsof：オープン中のファイルやそのファイルをオープンしているプロセスのリストを出力する
    //       "list open files" の略
    // -i：ネットワークソケットファイルを表示
    // -n：IPアドレスをホスト名に変換しないオプション
    // -P：ポート番号をサービス名に変換しないオプション
    // "LISTEN"：他のコンピュータから待ち受けているポートを示す。
    // "ESTABLISHED"：現在通信中のポートを示す。
    $ sudo lsof -i -n -P
    COMMAND    PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
    rpcbind   2679      rpc    6u  IPv4  16789      0t0  UDP *:111
    rpcbind   2679      rpc    7u  IPv4  16793      0t0  UDP *:727
    rpcbind   2679      rpc    8u  IPv4  16794      0t0  TCP *:111 (LISTEN)
    rpcbind   2679      rpc    9u  IPv6  16795      0t0  UDP *:111
    rpcbind   2679      rpc   10u  IPv6  16796      0t0  UDP *:727
    rpcbind   2679      rpc   11u  IPv6  16797      0t0  TCP *:111 (LISTEN)
    chronyd   2702   chrony    1u  IPv4  17280      0t0  UDP 127.0.0.1:323
    chronyd   2702   chrony    2u  IPv6  17281      0t0  UDP [::1]:323
    dhclient  2910     root    6u  IPv4  17815      0t0  UDP *:68
    dhclient  3032     root    5u  IPv6  18132      0t0  UDP [fe80::4f4:e7ff:fe7f:da0c]:546
    master    3169     root   13u  IPv4  18980      0t0  TCP 127.0.0.1:25 (LISTEN)
    sshd      3388     root    3u  IPv4  20815      0t0  TCP *:22 (LISTEN)
    sshd      3388     root    4u  IPv6  20824      0t0  TCP *:22 (LISTEN)
    sshd     32416     root    3u  IPv4  56384      0t0  TCP 10.0.10.10:22->126.193.60.75:20586 (ESTABLISHED)
    sshd     32433 ec2-user    3u  IPv4  56384      0t0  TCP 10.0.10.10:22->126.193.60.75:20586 (ESTABLISHED)

  上記では、"sshd"というプログラムが、アドレス制限なしの22番ポートで待ち受けている。
  このため、SSH接続できるのである。


【Route53】ドメインを登録する
=============================

----
用語
----

.. glossary::

  ドメイン

    * インターネット上の住所のようなもの。
      IPアドレスは覚えにくいため、Webサイトにアクセスするときはドメインを使用する。
    * 「www.example.co.jp」の場合、以下にように呼称する

      * jp：トップレベルドメイン
      * co：第2レベルドメイン
      * example：第3レベルドメイン
      * www：第4レベルドメイン

    * ドメイン名全体はICANN（非営利組織。IPアドレスも管理）が管理していて、トップレベルドメイン毎にレジストリが管理。
      販売はレジストラとリセラが行う。
      一般消費者が購入する先はレジストラとリセラである。

  DNS

    * Domain Name System。ドメイン名管理システム。
    * ドメイン名をIPアドレスに変換する
    * ネームサーバとフルリゾルバの2つから構成されている

      * ネームサーバ

        * ドメイン名とそれに紐づくIPアドレスが登録されているサーバ
        * ドメインの階層ごとにネームサーバが配置され、そのネームサーバが配置された階層のドメインに関する情報を管理する

      * フルリゾルバ（秘書的役割）

        * 「どのドメインに紐づくIPアドレスを教えて」と問い合わせると、色々なネームサーバに聞いてIPアドレスを調べて教えてくれるサーバ

    * フローは以下のようになる

      #. WebブラウザにURL（abc.work）を入力
      #. フルリゾルバにIPアドレスを問い合わせる
      #. ルートネームサーバにIPアドレスを問い合わせる
      #. workのネームサーバにIPアドレスを問い合わせる
      #. ネームサーバRoute53にIPアドレスを問い合わせる
      #. IPアドレス（xx.xx.xx.xx）を取得する
      #. WebブラウザがIPアドレス（xx.xx.xx.xx）に接続する

    * DNSはドメイン名とIPアドレスだけでなく、様々な情報を管理している。
    * DNSの「ドメイン名とIPアドレスの紐づけ」一つ一つのことをリソースレコードと呼び、IPアドレス以外も管理している。
      （Aレコード：IPアドレス、MXレコード：メール受信サーバ、など）

  Route 53

    * AWSのDNSサービス。ネームサーバの役割を果たす
    * 特徴

      * 高可用性。SLA 100%（AWSによってネームサーバが落ちないことが保証されている）
      * 高速。エッジロケーションの中で最も近いロケーションから応答を返す
      * フルマネージドサービス。DNSサーバの設計・構築・維持管理が不要

    * 重要概念

      * ホストゾーン

        DNSのリソースレコードの集合。ゾーンファイルのようなもの

      * レコードセット

        リソースレコードのこと

      * ルーティングポリシー

        Route53がRecord Setに対してどのようにルーティングを行うかを決める
        （シンプルルーティング／加重ルーティング／レイテンシールーティング／位置情報ルーティング／フェイルオーバルーティング）

      * ヘルスチェック

        サーバの稼働状況をチェック

----
手順
----

* ドメインを購入する

  * 勉強用途であるので最安値の.workを使う（1年目：1円、2年目以降：991円）
  * Whois情報公開代行をON（通常はデフォルト設定）
  * Whois情報公開代行メール転送オプションをON（300円）

* ドメインの設定を行う

  * ドメイン自動更新設定をOFF（1年で廃棄される）

* Route53でDNSを設定する

  * EC2インスタンスをrunning状態にしておき、Elastic IPアドレスを割り当てEC2インスタンスに関連付けておく
  * ドメインのネームサーバをRoute53に変更

    * Route53でホストゾーンを作成

      * AWS -> Route53 -> DNS管理（今すぐ始める）をクリック
      * 「ホストゾーンの作成」ボタンを押す

        * ドメイン名：作成したドメイン名"tak-space.work"を入力
        * コメント：任意
        * タイプ：パブリックホストゾーン（インターネットからアクセスする場合）

      * 作成ボタンを押す
      * すると、NSレコードとSOAレコードのみが登録された状態が表示される。
        NSレコードの「値」項目に表示されているURL（4種）を以降で使用する

    * ネームサーバをお名前.comからRoute53に変更

      * お名前.comにログインし、「ドメイン一覧」をクリック
      * "tak-space.work"をクリック
      * ネームサーバ情報の「変更する」ボタンを押す
      * "tak-space.work"のチェックボックスにチェックを入れる
      * 「他のネームサーバを利用」のタブをクリック
      * 「ネームサーバ情報を入力」欄に、上記NSレコードに表示されていたURL（4種）を入力する。
        入力順は何でもよい。ただし、URLの末尾の"."は入力不要
      * 「確認画面へ進む」ボタンを押す
      * 「設定する」ボタンを押す
      * 設定が反映されるには24～72時間かかる場合がある（今回はすぐに反映された）

  * ドメインに紐づくIPアドレスを登録

    * Route53でレコードセットを作成（Aレコードを作成）

      * AWS -> Route53 -> ホストゾーンをクリック
      * "tak-space.work"をクリック
      * 「レコードセットの作成」ボタンを押す

        * 名前：空欄にする（"tak-space.work"でアクセス可能にするため）
        * タイプ：A-IPv4アドレス
        * エイリアス：いいえ（エイリアスとは、IPアドレスの代わりにAWS専用の名前でどこに紐づけるかを指定するオプション）
        * TTL：300（フルリゾルバに、ドメイン名とIPアドレスの紐づけデータをキャッシュしておく秒数）
        * 値：Elastic IPアドレスを入力する
        * ルーティングポリシー：シンプル

      * 「作成」ボタンを押す

----
補足
----

* ドメイン購入のお店について

  * 選ぶポイント

    * 価格。1年目だけでなく、2年目以降の価格をチェック
    * 管理画面の使いやすさや、設定変更の反映の速さ
    * 無料プションの充実度

  * お名前.com

    * 国内最大のレジストラ。迷ったらここを選んでおけばOK
    * 580種類以上のドメインの取り扱い
    * 累積登録実績2000万件

* "tak-space.work"のネームサーバ確認

  * ネームサーバをお名前.comからRoute53に変更する前

    .. code-block:: console

      // dig：ドメインに紐づくIPアドレスや、IPアドレスに紐づくドメインなど
      //      を調べるコマンド
      // NS：ネームサーバを表示するためのオプション
      // +short：digコマンドではいろいろな情報が表示されるので、
      //         ネームサーバのみを表示するためのオプション
      $ dig tak-space.work NS +short
      dns2.onamae.com.    // お名前.comのネームサーバ
      dns1.onamae.com.    // お名前.comのネームサーバ

      // 上記のように、お名前.comのネームサーバが表示されるのは、
      // "tak-space.work"というゾーンが、お名前.comのネームサーバに
      // 委任されているから
      // 簡単に言うと、workのネームサーバにIPアドレスを問い合わせた際に
      // お名前.comのネームサーバに聞いてくれと返されることを意味する

  * ネームサーバをお名前.comからRoute53に変更した後

    .. code-block:: console

      // 以下のようにRoute53のネームサーバが表示されるようになった
      $ dig tak-space.work NS +short
      ns-1154.awsdns-16.org.
      ns-1920.awsdns-48.co.uk.
      ns-165.awsdns-20.com.
      ns-646.awsdns-16.net.

      // なお、以下のようにするとIPアドレスを確認できる
      // A：Aレコード（IPアドレス）を表示させるオプション
      $ dig tak-space.work A +short
      x.xxx.xxx.12    // IPアドレスが表示される

【RDS】DBサーバを構築する
=========================

----
用語
----

.. glossary::

  RDS

    * フルマネージドなリレーショナルデータベースのサービス
    * 従来と比較して構築／運用の手間を軽減できる
    * AWSでDBサーバを構築する方法には2種ある

      * EC2インスタンスにDBソフトウェア（MySQLなど）をインストールする方法

        * アプリ最適化／スケーリング／バックアップ／アップデートが必要

      * RDSを使用する方法

        * アプリ最適化が必要
        * 上記のEC2インスタンスを使用する方法に対しても手間が軽減できる

    * 利用可能なエンジン

      * MySQL
      * PostgreSQL
      * Oracle
      * Microsoft SQL Server
      * Amazon Aurora
      * MariaDB

    * 各種設定グループ（DBの設定を行う）

      * DBパラメータグループ：DB設定値を制御
      * DBオプショングループ：RDSへの機能追加を制御
      * DBサブネットグループ：RDSを起動させるサブネットを制御

    * 可用性の向上

      * マルチAZ（アベイラビリティゾーン）を簡単に構築
      * 複数のAZにDBを配置することで、マスタDBに何らかの障害が生じてもスレーブDBに切り替えることで運用を継続できる
      * スレーブDBはマスタDBのレプリケーション（コピー）である

    * パフォーマンスの向上

      * リードレプリカを簡単に構築できる
      * リードレプリカとは、読出し専用のDBであり、マスタDBのレプリケーションである
      * 書込みはマスタDBに、読出しはリードレプリカに対して行うことで、負荷を分散させパフォーマンスを向上させることができる
      * リードレプリカは複数配置することもできる

    * 運用負荷の軽減

      * 自動的なバックアップ

        * 1日1回バックアップを自動取得（スナップショット）
        * スナップショットを元にDBインスタンスを作成（リストア）

      * 自動的なソフトウェアメンテナンス

        * メンテナンスウィンドウで指定した曜日・時間帯にアップデートを自動実施

      * 監視

        * 各種メトリクスを60秒間隔で取得・確認可能

----
手順
----

* はじめに

  RDSはサブネットの中に設置する。
  RDSを作成する際は、マルチAZができるようにするために、
  複数のアベイラビリティゾーンにサブネットが作成されていなければならない。
  このため、RDS設置前にサブネットを作成しておく必要がある。

* プライベートサブネットの作成

  * AWS -> VPC -> サブネットをクリック
  * 「サブネットの作成」ボタンを押し、プライベートサブネットを作成する

    * 名前タグ：任意（aws-and-infra-private-subnet-1c）
    * VPC：事前作成のVPCを選択
    * VPC CIDR：デフォルトのまま
    * アベイラリティゾーン：任意（ap-northeast-1c）
    * IPv4 CIDRブロック：任意のプライベートIPアドレス（10.0.21.0/24）

* RDSの作成準備

  * セキュリティグループの作成（EC2）

    * AWS -> EC2 -> セキュリティグループ -> セキュリティグループの作成ボタンを押す

      * セキュリティグループ名：任意（例：aws-and-infra-db）
      * 説明：任意（例：aws-and-infra-db）
      * VPC：事前作成のVPCを選択
      * インバウンド -> ルールの追加ボタンを押す

        * タイプ：MYSQL/Aurora
        * プロトコル：TCP（固定）
        * ポート範囲：3306（固定）
        * ソース：カスタム、aws-and-infra-webのセキュリティグループID
          （aws・・と入力すると候補が表示されるので選択。）

  * DBサブネットグループの作成

    * マルチAZの関係で複数のサブネットからグループを作成する必要がある
    * AWS -> RDS -> サブネットグループ -> DBサブネットグループの作成ボタンを押す

      * 名前：任意（例：aws-and-infra-subnet-group）
      * 説明：任意（例：aws-and-infra-subnet-group）
      * VPC：事前作成のVPCを選択
      * サブネット1追加（以下入力後、サブネットを追加しますボタンを押す）

        * アベイラリティゾーン：ap-northeast-1a
        * サブネット：プライベートサブネット（10.0.20.0/24）

      * サブネット2追加（以下入力後、サブネットを追加しますボタンを押す）

        * アベイラリティゾーン：ap-northeast-1c
        * サブネット：プライベートサブネット（10.0.21.0/24）

  * DBパラメータグループの作成

    * RDSではDBの設定ファイルを直接編集できないので、その代わりにDBの設定値を指定する
    * AWS -> RDS -> パラメータグループ -> パラメータグループの作成ボタンを押す

      * パラメータグループファミリ：mysql8.0
      * グループ名：任意（例：aws-and-infra-mysql80）
      * 説明：任意（例：aws-and-infra-mysql80）

  * DBオプショングループの作成

    * DBの機能を設定する（プラグインを使うなど）
    * AWS -> RDS -> オプショングループ -> グループの作成ボタンを押す

      * 名前：任意（例：aws-and-infra-mysql80）
      * 説明：任意（例：aws-and-infra-mysql80）
      * エンジン：mysql
      * メジャーエンジンのバージョン：8.0

    * 上記オプショングループ（aws-and-infra-mysql80）のみでなく、
      デフォルトのオプショングループ（default:mysql-8-0）も作成される。
      今後編集していくのは作成したグループ（aws-and-infra-mysql80）の方であり、これがセオリーである。

* RDSの作成

  * AWS -> RDS -> データベース -> データベースの作成ボタンを押す

    * 標準作成
    * エンジンのタイプ：MySQL
    * エディション：MySQL Community（固定）
    * バージョン：MySQL8.0.15
    * テンプレート：開発／テスト（課金されるが機能限定がほとんどなく本番に近い環境）
    * DBインスタンス識別子（RDSインスタンスの名前）：任意（例：aws-and-infra-web）
    * マスタユーザ名：任意（例：root）
    * パスワードの自動生成：チェックなし
    * マスタパスワード：任意（例：password）
    * DBインスタンスサイズ：バースト可能クラス（安価にするため）
    * ストレージタイプ：汎用
    * ストレージ割り当て：20（デフォルト）
    * ストレージの自動スケーリングを有効にする：チェックなし（DB負荷が高くなった時に自動的に容量の大きなDBに変更する場合に使用）
    * マルチAZ配置：スタンバイインスタンスを作成しないでください（安価にするためマルチAZ未対応にする）
    * VPC：事前作成のVPCを選択（例：aws-and-infra-vpc）
    * サブネットグループ：事前作成のサブネットグループを選択（例：aws-and-infra-subnet-group）
    * パブリックアクセス可能：なし（セキュリティを高めるためVPC以外からアクセスをしない）
    * VPCセキュリティグループ：既存の選択
    * 既存のVPCセキュリティグループ：事前作成のVPCセキュリティグループを選択（例：aws-and-infra-db）、デフォルトは削除
    * アベイラリティゾーン：任意（例：ap-northeast-1a）
    * データベースポート：3306（デフォルト）
    * データベース認証：パスワード認証（デフォルト）
    * 最初のデータベース名：空欄
    * DBパラメータグループ：事前作成のDBパラメータグループを選択（例：aws-and-infra-mysql80）
    * オプショングループ：事前作成のオプショングループを選択（例：aws-and-infra-mysql80）
    * 自動バックアップの有効化：チェックあり
    * バックアップ保持期間：30日間（長い方がよい）
    * バックアップウィンドウ：選択ウィンドウ（バックアップ開始時刻を設定）

      * 開始時間：19:00UTC（日本時刻は+9h=4:00）
      * 期間：0.5時間

    * スナップショットにタグをコピー：チェックあり
    * 拡張モニタリングの有効化：チェックなし（詳細なモニタリング用。課金）
    * ログのエクスポート：どれもチェックなし
    * マイナーバージョン自動アップグレードの有効化：チェックあり
    * メンテナンスウィンドウ：選択ウィンドウ（メンテナンス開始時刻を設定）

      * 開始時間：20:00UTC（日本時刻は+9h=5:00）
      * 期間：0.5時間

    * 削除保護の有効化：チェックなし（学習用で削除したい場合があるため）
    * 概算月間コスト（db.t2.microが無料枠なのでもっと安価なはず）

      * DB インスタンス：18.98 USD
      * ストレージ：2.76 USD
      * 合計：21.74 USD

* WebサーバからRDSに接続する

  * webサーバにSSH接続する（TeraTerm）
  * WebサーバにMySWLをインストール

    .. code-block:: console

      $ sudo yum -y install mysql

  * RDSインスタンスのエンドポイントをコピーしておく（例：aws-and-infra-web.xxxxx.ap-northeast-1.rds.amazonaws.com）
  * WebサーバからRDSへmysqlコマンドで接続

    .. code-block:: console

      // -h：エンドポイントを指定
      // -u：ユーザ名を指定
      // -p：パスワード入力要求
      $ mysql -h aws-and-infra-web.xxxxx.ap-northeast-1.rds.amazonaws.com -u root -p
      Enter password:   // 設定パスワード（password）入力
      MySQL [(none)]>

----
補足
----

* スナップショット

  * AWS -> RDS -> データベース -> aws-and-infra-web（作成済DB）-> メンテナンスとバックアップ -> スナップショットの取得ボタン
    にて手動でスナップショットを保存できる
  * ただし、自動バックアップとは異なり自動的に削除されない（課金）ので要注意
  * 自動バックアップの場合は、設定した期間が経過したら、もしくはRDSインスタンスを削除したら自動的に削除される

* RDSインスタンスの停止

  * AWS -> RDS -> データベース -> aws-and-infra-web（作成済DB）-> アクション -> 停止
    にて停止可能
  * 停止させると安価にできる
  * ただし、本番環境では停止させない方がよい
  * 停止させるとAWSのリソース状況によってはすぐに開始できない可能性がある

【EC2】WordPressを構築する
==========================

----
用語
----

.. glossary::

  WordPress

    オープンソースのブログソフトウェア。
    PHPで開発されており、データベース管理システムとしてMySQLを利用している。
    （プラグインよりSQLiteでの使用も可能）

  TCP/IP

    * TCP・IPを中心として、インターネットを構築する上で必要なプロトコル群の総称。

      * アプリケーションプロトコル：HTTP、SMTP、FTP
      * トランスポートプロトコル：TCP、UDP
      * 経路制御プロトコル：RIP、OSPF、BGP
      * インターネットプロトコル：IP、ICMP、ARP

    * インターネットではTCP/IPプロトコルに基づいて通信が行われている
    * TCP/IPでは、インターネットでコンピュータ同士が通信する一連の処理を、4階層で表現する

      * アプリケーション層：アプリケーション同士が会話する（:term:`HTTP`、DNS、SSH、SMTP）
      * :term:`トランスポート層`：データの転送を制御する（:term:`TCP`、:term:`UDP`）
      * ネットワーク層：IPアドレスを管理し、経路選択する（:term:`IP`、ICMP、ARP）
      * ネットワークインターフェース層：直接接続された機器同士で通信する（Ethernet、PPP）

  HTTP

    * WebプラウザとWebサーバ間が通信するときに利用されるプロトコル
    * HyperText Transfer Protocol
    * インターネットでHTMLなどのコンテンツの送受信に用いられる通信の約束ごと
    * クライアントがHTTPリクエストを送り、それに対してサーバがHTTPレスポンスを返す。
      そのリクエスト・レスポンスの書き方がHTTPの正体
    * HTTPリクエストの中身

      * リクエストライン：GET/HTTP/1.1
      * ヘッダ：Host、User-Agent、Accept-Encoding、など
      * ボディ：特になし（オプション）

    * HTTPレスポンスの中身

      * ステータスライン：HTTP/1.1 200 OK（200はステータスコード、OKはステータスコードの意味を示す）
      * ヘッダ：Date、Content-Type、Cache-Control、など
      * ボディ：<!doctype html><html>...</html>

  TCP

    * :term:`トランスポート層` のプロトコル
    * Transmission Control Protocol
    * 信頼性のある通信を提供
    * 信頼性を保つために、送信するパケットの順序制御や再送制御を行う
      （データを受信したら確認応答があり、次に受信すべきシーケンス番号を返す）
    * 信頼性のある通信を実現する必要がある場合に使用する
    * コネクション管理し、通信相手との間で通信を始める準備をしてから通信を行う

  UDP

    * :term:`トランスポート層` のプロトコル
    * User Datagram Protocol
    * 信頼性のない通信
    * 送信するだけで、パケットが届いたかは保証しない
    * 高速性やリアルタイム性を重視する通信で使用する
    * コネクションレスなのでいつでもデータを送信できる

  IP

    * ネットワーク層のプロトコル
    * 役割

      * IPアドレス
      * 終点コンピュータまでのパケット配送（ルーティング）
      * パケットの分割・再構築処理
        （ネットワークインターフェース層のプロトコルによって、最大転送単位が異なる。
        IPでは、各ネットワークインターフェースの最大転送単位より小さくなるように
        パケットを分割して送信し、終点コンピュータで再構築する）

    * IPヘッダに、送信元IPアドレスと宛先IPアドレスが含まれている

  トランスポート層

    * アプリケーション間コネクションの確立・切断を担う
    * どのアプリケーションと通信するかを指定する役割も担う。
      どのアプリケーションかを指定するのがポート番号

----
手順
----

* WordPress用のDB作成

  * DB作成

    * WebサーバへSSHでログインする
    * WebサーバからRDSへmysqlコマンドでrootユーザで接続（前述）
    * DBを作成する

      .. code-block:: sql

        -- create database：DB作成コマンド
        -- default character set：デフォルト文字コード設定
        -- collate：DBの照合順序を指定
        -- 「utf8_general_ci」の末尾の「_ci」は大文字と小文字を区別しないという意味
        MySQL> create database aws_and_infra default character set utf8 collate utf8_general_ci;

        -- DB一覧を確認
        MySQL> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | aws_and_infra      |
        | information_schema |
        | mysql              |
        | performance_schema |
        | sys                |
        +--------------------+

  * ユーザ作成

    .. code-block:: sql

      -- 'aws_and_infra'：ユーザ名
      -- @：接続元を指定。'%'で接続元はどこでもOKの意味
      -- identified by：接続時のパスワードを指定。パスワードは'password'
      MySQL> create user 'aws_and_infra'@'%' identified by 'password';

  * ユーザに権限付与

    .. code-block:: sql

      -- grant all：全ての権限を付与する
      -- aws_and_infra.*："aws_and_infra"DBの全てのテーブルを操作できる
      MySQL> grant all on aws_and_infra.* to 'aws_and_infra'@'%';

      -- 設定を反映させる
      MySQL> flush privileges;

      -- ユーザの一覧を表示
      MySQL> select user, host from mysql.user;
      +------------------+-----------+
      | user             | host      |
      +------------------+-----------+
      | aws_and_infra    | %         |  -- '%'：接続元はどこでもOK
      | root             | %         |
      | mysql.infoschema | localhost |
      | mysql.session    | localhost |
      | mysql.sys        | localhost |
      | rdsadmin         | localhost |
      +------------------+-----------+

      -- 一旦終了
      MySQL> exit;

  * WebサーバからRDSへmysqlコマンドで"aws_and_infra"ユーザで接続できるか確認

    .. code-block:: console

      $ mysql -h aws-and-infra-web.cwabjdc2qra8.ap-northeast-1.rds.amazonaws.com -u aws_and_infra -p
      Enter password:   // 設定パスワード（password）入力
      MySQL [(none)]>

* WordPressのインストール

  * WordPressを動かすのに必要なライブラリのインストール

    .. code-block:: console

      // WordPressを動かすためにはphpが必要だが、
      // 通常の"sudo yum -y install php"ではphp5.4がインストールされる。
      // 最新のWordPressではphp5.6以上が必要。
      // このため以下のコマンドを用いる。
      $ sudo amazon-linux-extras install -y php7.2

      // php関連のライブラリをyumからインストール
      // 先に"amazon-linux-extras install"コマンドでphp7.2をインストール
      // しておくと、yumコマンドでphp7.2の関連ライブラリをインストールできる
      $ sudo yum install -y php php-mbstring

  * WordPressのダウンロード

    .. code-block:: console

      // ホームディレクトリに移動しておく
      $ cd ~

      // wget：URLを指定してファイルをダウンロードするコマンド
      $ wget https://ja.wordpress.org/latest-ja.tar.gz

      // ダウンロードファイルを確認
      $ ls
      latest-ja.tar.gz

  * WordPressの解凍

    .. code-block:: console

      // tar：複数のファイルをまとめて圧縮したり解凍したりするコマンド
      // x：解凍を指示するオプション
      // z：gzipを使用するオプション
      // v：圧縮／解凍状況を表示するオプション
      // f：圧縮ファイル名を指定するオプション
      $ tar xzvf latest-ja.tar.gz

      // 解凍ファイルを確認
      $ ls
      latest-ja.tar.gz  wordpress

      // "wordpress"ディレクトリへ移動
      $ cd wordpress/

  * WordPressのプログラムをApacheから見える場所に配置

    .. code-block:: console

      // cp：ファイルをコピーするコマンド
      // -r *：現ディレクトリ以下全てのファイルとディレクトリを指定するオプション
      // /var/www/html/：コピー先ディレクトリ（Apacheが参照するディレクトリ）
      $ sudo cp -r * /var/www/html/

  * WordPressファイルの所有者・グループを変更

    .. code-block:: console

      // chown：change owner。ファイルの所有者・所有グループ変更コマンド
      // apache:apache：ファイルの所有者と所有グループをapacheに変更するの意
      // /var/www/html/ -R："/var/www/html/"以下全てのファイルを対象
      $ sudo chown apache:apache /var/www/html/ -R

  * Apacheの再起動（これによりApacheがWordPressのファイルを読み取ってくれるようになる）

    .. code-block:: console

      // 現在のapacheの起動状態を確認
      $ sudo systemctl status httpd.service
      Active: active (running)    // 起動中の意味

      // もし上記が起動中でない場合は起動させる
      $ sudo systemctl start httpd.service

      // Apacheを再起動させる
      $ sudo systemctl restart httpd.service

* WordPressの設定

  * ドメイン名にアクセスする
  * WordPressの設定

    * 「さぁ、始めましょう！」ボタンを押す

      * データベース名：aws_and_infra
      * データベースのユーザー名：aws_and_infra
      * データベースのパスワード：password
      * データベースホスト：RDSインスタンスのエンドポイントを記載
        （AWS -> RDS -> データベース -> aws-and-infra-web（作成済DB）-> エンドポイント）
      * テーブル接頭辞：wp_（デフォルト）
      * 「送信」ボタンを押す

    * 「インストール実行」ボタンを押す

      * サイトのタイトル：任意（例：ゼロから実践するAWS）
      * ユーザ名：任意（例：admin）
      * パスワード：任意
      * メールアドレス：各自
      * 検索エンジンでの表示：任意（非公開にしたい場合はチェックする）
      * 「WordPressをインストール」ボタンを押す

    * 「ログイン」ボタンからログインすると、管理画面が表示される

  * ドメイン名にアクセスすると「HelloWorld!」画面が表示される

----
補足
----


【】
=============================

----
用語
----

.. glossary::


----
手順
----

----
補足
----


【】
=============================

----
用語
----

.. glossary::


----
手順
----

----
補足
----

