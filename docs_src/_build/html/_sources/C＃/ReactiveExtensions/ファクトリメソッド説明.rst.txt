======================
ファクトリメソッド説明
======================

IObservableのファクトリメソッドリスト
=====================================

.. glossary::

    Return

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 指定した値を通知する
        * SubscribeするとOnNextの後にCompletedが呼ばる
        * 2回目Subscribeを行うと値の発行と終了の通知を再び行う

        .. code-block:: csharp

            // 10を発行するIObservable<int>を作成する
            var source = Observable.Return(10);
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読の停止（この場合意味はない）
            subscription.Dispose();

        .. code-block:: csharp

            // 上記の実行結果
            OnNext(10)
            Completed()

        .. code-block:: csharp

            NoActionCommand = Observable.Return(false).ToAsyncReactiveCommand().AddTo(Disposable);

    Repeat

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 同じ値を指定した回数発行する

        .. code-block:: csharp

            // 2を5回発行するIObservable<int>を作成する
            var source = Observable.Repeat(2, 5);
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            subscription.Dispose();

        .. code-block:: csharp

            // 上記の実行結果
            OnNext(2)
            OnNext(2)
            OnNext(2)
            OnNext(2)
            OnNext(2)
            Completed()

    Range

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 指定した値から1ずつカウントアップした値を指定した個数だけ返す

        .. code-block:: csharp

            // 1から始まる値を10個発行するIObservable<int>を作成する
            var source = Observable.Range(1, 10);
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            subscription.Dispose();
            
        .. code-block:: csharp

            // 上記の実行結果
            OnNext(1)
            OnNext(2)
            OnNext(3)
            OnNext(4)
            OnNext(5)
            OnNext(6)
            OnNext(7)
            OnNext(8)
            OnNext(9)
            OnNext(10)
            Completed()

    Generate

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 指定した範囲の値を用いて算出される値を返す

        .. code-block:: csharp

            // 初期値0, 値が10より小さい間, 値は1ずつインクリメントして, 値を二乗したものを発行する
            // IObservable<int>を作成する。
            // for (int i = 0; i < 10; i++) { yield return i * i; }のようなイメージ
            var source = Observable.Generate(0, i => i < 10, i => ++i, i => i * i);
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            subscription.Dispose();
            
        .. code-block:: csharp

            // 上記の実行結果
            OnNext(0)
            OnNext(1)
            OnNext(4)
            OnNext(9)
            OnNext(16)
            OnNext(25)
            OnNext(36)
            OnNext(49)
            OnNext(64)
            OnNext(81)
            Completed()
        
    Defer

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * IObservableを直接返すラムダ式を引数に渡す
        * Subscribeメソッドが呼ばれる度に、Deferメソッドが実行されてIObservableが作成される
        * 任意の値を返すIObservableを作成する時に使う？

        .. code-block:: csharp

            // 1, 2, 3と順番に値を発行して終了するIObservable<int>を生成する
            var source = Observable.Defer<int>(() =>
            {
                Console.WriteLine("# Defar method called.");
                // ReplaySubject<T>はSubject<T>の亜種でSubscribeされると
                // 今まで行われた操作を全てリプレイする。
                var s = new ReplaySubject<int>();
                s.OnNext(1);
                s.OnNext(2);
                s.OnNext(3);
                s.OnCompleted();
                // AsObservableでIObservable<T>へ変換できる。
                return s.AsObservable();
            });
            // 購読(sourceはReplaySubjectで作っているのでDeferメソッド内でした操作が再生される)
            var subscription1 = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            var subscription2 = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            subscription1.Dispose();
            subscription2.Dispose();
            
        .. code-block:: csharp

            // 上記の実行結果
            # Defar method called.
            OnNext(1)
            OnNext(2)
            OnNext(3)
            Completed()
            # Defar method called.
            OnNext(1)
            OnNext(2)
            OnNext(3)
            Completed()

    Create

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 引数の形が特殊でIObserverを受け取ってActionを返すラムダ式を引数に受け取る

        .. code-block:: csharp

            // 1, 2, 3と順番に値を発行して終了するIObservable<int>を生成する
            var source = Observable.Create<int>(observer =>
            {
                Console.WriteLine("# Create method called.");
                // 引数のIObserver<int>に対してOn****メソッドを呼ぶ
                observer.OnNext(1);
                observer.OnNext(2);
                observer.OnNext(3);
                observer.OnCompleted();
                // Disposeが呼ばれた時の処理を返す。
                // リソースを確保していた場合は、ここで解放すると良い。
                return () => Console.WriteLine("Disposable action");
            });
            // 購読
            var subscription1 = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            var subscription2 = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            Console.WriteLine("# Dispose method call.");
            subscription1.Dispose();
            subscription2.Dispose();
            
        .. code-block:: csharp

            // 上記の実行結果
            ## CreateSample
            # Create method called.
            OnNext(1)
            OnNext(2)
            OnNext(3)
            Completed()
            Disposable action
            # Create method called.
            OnNext(1)
            OnNext(2)
            OnNext(3)
            Completed()
            Disposable action
            # Dispose method call.
        
    Throw

        * https://blog.okazuki.jp/entry/20111104/1320409976
        * 引数に例外を渡す
        * 疑似的にエラーを起こしたいときに使う

        .. code-block:: csharp

            // エラーを発行するだけのIObservable<int>を生成
            var source = Observable.Throw<int>(new Exception("Error message"));
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));
            // 購読停止（この場合意味はない）
            subscription.Dispose();

            // 上記の実行結果
            // OnError(Error message)

Timer系のファクトリメソッドリスト
=================================

.. glossary::

    Timer

        * https://blog.okazuki.jp/entry/20111106/1320584830
        * 一定時間ごとに値を発行する
        * 発行する値はTimerが実行された回数
        * いくつかオーバーロードがある

        .. code-block:: csharp

            // 3秒後から1秒間隔で値を発行するIObservable<long>を作成する
            var source = Observable.Timer(
                TimeSpan.FromSeconds(3),    // タイマーを開始するまでの時間
                TimeSpan.FromSeconds(1));   // タイマーのインターバルをTimeSpan型で指定
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));

            // 3秒後からOnNext(回数)が表示される
            Console.WriteLine("please enter key...");
            Console.ReadLine();
            // Observableが発行する値の購読を停止
            Console.WriteLine("dispose method call.");
            subscription.Dispose();
            // Disposeをすると値が発行されなくなる。
            Console.WriteLine("please enter key...");
            Console.ReadLine();

        .. code-block:: csharp

            // 上記の実行結果
            please enter key...  // ここから3秒何も表示されない
            OnNext(0)            // 3秒たつと1秒間隔でOnNextが呼ばれる
            OnNext(1)
            OnNext(2)
            OnNext(3)
            OnNext(4)
            OnNext(5)
            dispose method call. // Enterを押してDisposeが呼ばれるとOnNextも止まる
            please enter key...

    Interval

        * https://blog.okazuki.jp/entry/20111106/1320584830
        * 一定時間ごとに値を発行する
        * 発行する値はTimerが実行された回数
        * TimeSpanを1つ渡すだけ

        .. code-block:: csharp

            // 500ms間隔で値を発行する
            var source = Observable.Interval(TimeSpan.FromMilliseconds(500));
            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));

            Console.WriteLine("please enter key...");
            Console.ReadLine();
            // Observableが発行する値の購読を停止
            Console.WriteLine("dispose method call.");
            subscription.Dispose();
            // Disposeをすると値が発行されても受け取らなくなる。
            Console.WriteLine("please enter key...");
            Console.ReadLine();

        .. code-block:: csharp

            // 上記の実行結果
            please enter key...
            OnNext(0)
            OnNext(1)
            OnNext(2)
            OnNext(3)
            OnNext(4)
            OnNext(5)
            OnNext(6)
            dispose method call.
            please enter key...

    Generate

        * https://blog.okazuki.jp/entry/20111106/1320584830
        * 指定した時間間隔で値を発行するIObservableを作成

        .. code-block:: csharp

            var source = Observable.Generate(
                // 0から
                0,
                // i < 10以下の間繰り返す
                i => i < 10,
                // iは1ずつ増える
                i => ++i,
                // 発行する値はiの二乗
                i => i * i,
                // 値は(発行する値 * 100)ms間隔で発行する
                i => TimeSpan.FromMilliseconds(i * 100));

            // 購読
            var subscription = source.Subscribe(
                i => Console.WriteLine("OnNext({0})", i),
                ex => Console.WriteLine("OnError({0})", ex.Message),
                () => Console.WriteLine("Completed()"));

            Console.WriteLine("please enter key...");
            Console.ReadLine();
            // Observableが発行する値の購読を停止
            Console.WriteLine("dispose method call.");
            subscription.Dispose();
            // Disposeをすると値が発行されても受け取らなくなる。
            Console.WriteLine("please enter key...");
            Console.ReadLine();

        .. code-block:: csharp

            // 上記の実行結果
            please enter key...
            OnNext(0)
            OnNext(1)
            OnNext(4)
            OnNext(9)
            OnNext(16)
            OnNext(25)
            OnNext(36)
            OnNext(49)
            OnNext(64)
            OnNext(81)
            Completed()
            dispose method call.
            please enter key...

        * https://qiita.com/yutorisan/items/3249e4d5aac5b7bd4189
        * 任意の時間間隔で値を発行する
        * 発行する順番を定義したTimeSpanのListを用意して、timeSelectorで値を順番に読んでいくように指定することで、Listに定義した間隔で値が発行されます

        .. code-block:: csharp

            // 定義
            public static IObservable<TResult> Generate<TState, TResult> (
                TState initialState,                    //TStateの初期値を指定
                Func<TState, bool> condition,           //継続条件を指定
                Func<TState, TState> iterate,           //TStateの変化量を指定
                Func<TState, TResult> resultSelector,   //発光する値を指定
                Func<TState, TimeSpan> timeSelector)    //時間間隔を指定;

            // 使用例
            public static void Main(string[] args)
            {
                //発行間隔を定義
                List<TimeSpan> intervals = new List<TimeSpan>()
                {
                    TimeSpan.FromSeconds(1),
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(3),
                    TimeSpan.FromSeconds(4),
                    TimeSpan.FromSeconds(5)
                };

                Console.WriteLine("{DateTime.Now} 値の発行を開始します");
                Observable.Generate(initialState: 0,
                                    condition: n => n < intervals.Count,
                                    iterate: n => ++n,
                                    resultSelector: n => n,
                                    timeSelector: n => intervals[n])
                          .Timestamp()
                          .Subscribe(val => Console.WriteLine("{val.Timestamp.ToLocalTime().DateTime} 発行された値：{val.Value}"),
                                      () => Console.WriteLine("値の発行が完了しました"));

                Console.Read();
            }

        .. code-block:: csharp

            // 実行結果
            2020/04/26 23:51:09 値の発行を開始します
            2020/04/26 23:51:10 発行された値:1
            2020/04/26 23:51:12 発行された値:2
            2020/04/26 23:51:15 発行された値:3
            2020/04/26 23:51:19 発行された値:4
            2020/04/26 23:51:24 発行された値:5
            値の発行が完了しました 

        * 任意の時間間隔で値を発行するファクトリメソッド（自作）

        .. code-block:: csharp

            public static IObservable<int> AnyInterval(IReadOnlyList<TimeSpan> intervals) =>
                Observable.Generate(initialState: 0,
                                    condition: n => n < intervals.Count,
                                    iterate: n => ++n,
                                    resultSelector: n => n,
                                    timeSelector: n => intervals[n]);

            // 使用例
            ObservableEx.AnyInterval(new List<TimeSpan>{TimeSpan.FromSeconds(1),
                                                        TimeSpan.FromSeconds(2),
                                                        TimeSpan.FromSeconds(3),
                                                        TimeSpan.FromSeconds(4),
                                                        TimeSpan.FromSeconds(5) })
                        .Timestamp()
                        .Subscribe(val => Console.WriteLine("{val.Timestamp.ToLocalTime().DateTime} 発行された値：{val.Value}"),
                                    () => Console.WriteLine("値の発行が完了しました"));

HotなIObservableを作成するファクトリメソッドリスト
==================================================

.. glossary::

    FromEvent

        * https://qiita.com/yutorisan/items/2475eaf5d8c3a6454e3f
        * 「C#標準のイベント」をIObservable<T>に変換する
        * 第一引数は「eventから発行された値をどのようにIObservable<T>シーケンスに伝達するか」
        * 第二引数は「Subscribeされたときの処理」
        * 第三引数は「Disposeされたときの処理」

        .. code-block:: csharp

            IObservable<Unit> clickEvent = 
                Observable.FromEvent<EventHandler, Unit>(
                    h => (sender, eventargs) => h(Unit.Default),
                    h => button1.Click += h,
                    h => button1.Click -= h); 

        * https://tocsworld.wordpress.com/2014/03/21/reactiveextensions%E3%81%AE%E5%85%A5%E9%96%80%E3%81%AE%E5%85%A5%E9%96%80%E3%81%8B%E3%82%89%E3%80%81%E5%BF%85%E6%AE%BA%E6%8A%80%E3%82%92%E7%B9%B0%E3%82%8A%E5%87%BA%E3%81%99%E3%81%BE%E3%81%A7/

        .. code-block:: csharp

            public static class RxEventHelper
            {
                public static IObservable<MouseButtonEventArgs> MouseDownAsObservable(this UIElement window)
                {
                    return Observable.FromEvent<MouseButtonEventHandler, MouseButtonEventArgs>
                        (
                            mouseAction => {
                                MouseButtonEventHandler handler = (sender, e) =>
                                {
                                    mouseAction(e);
                                };
                                return handler;
                            },
                            handler => window.MouseDown += handler,
                            handler => window.MouseDown -= handler
                        );
                }

                public static IObservable<MouseEventArgs> MouseMoveAsObservable(this UIElement window)
                {
                    return Observable.FromEvent<MouseEventHandler, MouseEventArgs>
                        (
                            mouseAction => (s, e) => mouseAction(e),
                            handler => window.MouseMove += handler,
                            handler => window.MouseMove -= handler
                        );
                }

                public static IObservable<MouseButtonEventArgs> MouseUpAsObservable(this UIElement window)
                {
                    return Observable.FromEvent<MouseButtonEventHandler, MouseButtonEventArgs>
                        (
                            mouseAction => (s, e) => mouseAction(e),
                            handler => window.MouseUp += handler,
                            handler => window.MouseUp -= handler
                        );
                }
            }

            // コードビハインド
            public partial class MainWindow : Window
            {
                private Point prev = new Point(0, 0);
                private IObservable<Point> dragOperation;
                public MainWindow()
                {
                    InitializeComponent();
                    RegisterXXXCommand();
                }
                public void RegisterXXXCommand()
                {
                    dragOperation = this
                        .MouseMoveAsObservable()
                        .SkipUntil(this.MouseDownAsObservable().Do(_ => this.CaptureMouse()))
                        .TakeUntil(this.MouseUpAsObservable().Do(_ => this.ReleaseMouseCapture()))
                        .Select(e => e.GetPosition(null));
                    //.Where(p => { prev = p; return (prev.X < p.X && prev.Y > p.Y); });

                    Subscrbe();
                }

                private void Subscrbe()
                {
                    dragOperation.Subscribe(p => { Debug.WriteLine("{p.X},{p.Y}"); }, () =>
                    {
                        Subscrbe();     // Completedで再登録
                        aaa();
                    });
                }

                private void aaa()
                {
                    Debug.Write("aaa");
                }
            }

        * https://neue.cc/2011/10/07_346.html
        * FromEventだとコードビハインドに書かざるを得ない？
        * 以下のようにイベントをXAML側で指定して、ReactivePropetyにバインドするのがお手軽か
        
        .. code-block:: csharp

            <Grid>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseMove">
                        <r:EventToReactive ReactiveProperty="{Binding MouseMove}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TextBlock Text="{Binding CurrentPoint.Value}" />
            </Grid>

        .. code-block:: csharp

            public class EventToReactiveViewModel
            {
                public ReactiveProperty<MouseEventArgs> MouseMove { get; private set; }
                public ReactiveProperty<string> CurrentPoint { get; private set; }

                public EventToReactiveViewModel()
                {
                    // UIからのイベントストリームを受信
                    MouseMove = new ReactiveProperty<MouseEventArgs>();

                    // とりあえず座標を表示する、というもの
                    CurrentPoint = MouseMove
                        .Select(m => m.GetPosition(null))
                        .Select(p => string.Format("X:{0} Y:{1}", p.X, p.Y))
                        .ToReactiveProperty("MouseDown and drag move");
                }
            }

    Start

        * https://blog.okazuki.jp/entry/20111109/1320849106
        * バックグラウンドで処理を実行し結果を返す
        * Startメソッドを呼び出した直後から処理が開始される

        .. code-block:: csharp

            // バックグラウンドで処理1を開始
            var source = Observable.Start(() =>
            {
                Console.WriteLine("background task start.");
                Thread.Sleep(2000);
                Console.WriteLine("background task end.");
                return 1.2;     // 処理1の結果。購読時に受け取る値
            });

            // 上の記述でバックグラウンドの処理1がすでに始まっている
            Thread.Sleep(5000);

            // 上記で5s待機したのでこの時点で処理1は完了済み
            // 完了後に購読1する
            // 処理1の結果である「1.2」を受け取る
            Debug.WriteLine("subscribe1");
            var subscription1 = source.Subscribe(
                i => Console.WriteLine("1##OnNext({0})", i),    // 上記の1.2を受け取る
                ex => Console.WriteLine("1##OnError({0})", ex.Message),
                () => Console.WriteLine("1##Completed()"));

            // Observableが発行する値の購読を停止
            Console.WriteLine("dispose method call.");
            subscription1.Dispose();

            // 購読2
            // 再び購読しても同じで、処理1の結果である「1.2」を受け取る
            Console.WriteLine("subscribe2");
            var subscription2 = source.Subscribe(
                i => Console.WriteLine("2##OnNext({0})", i),    // 上記の1.2を受け取る
                ex => Console.WriteLine("2##OnError({0})", ex.Message),
                () => Console.WriteLine("2##Completed()"));
            subscription2.Dispose();

        .. code-block:: csharp

            // 実行結果
            background task start.
            background task end.
            subscribe1          // これ以降は連続してDebug出力される
            1##OnNext(1.2)
            1##Completed()
            dispose method call.
            subscribe2
            2##OnNext(1.2)
            2##Completed()

    ToAsync

        * https://blog.okazuki.jp/entry/20111109/1320849106
        * バックグラウンドの任意のタイミングで処理を実行し結果を返す
        * Startメソッドは呼び出し時に処理が開始されるが、ToAsyncメソッドは処理の開始タイミングを柔軟に制御できる

        .. code-block:: csharp

            // 戻り値はFunc<IObservable<T>>
            var source = Observable.ToAsync(() =>
            {
                Console.WriteLine("background task start.");
                Thread.Sleep(2000);
                Console.WriteLine("background task end.");
                return 1;     // 処理の結果。購読時に受け取る値
            });

            // ToAsyncはデリゲートを返すのでInvoke() or ()をしないと処理が開始されない
            Console.WriteLine("source() call.");
            var invokedSource = source.Invoke();
            var subscription1 = invokedSource.Subscribe(
                i => Console.WriteLine("1##OnNext({0})", i),
                ex => Console.WriteLine("1##OnError({0})", ex.Message),
                () => Console.WriteLine("1##Completed()"));
            // 処理が確実に終わるように5秒待つ
            Console.WriteLine("sleep 5sec.");
            Thread.Sleep(5000);

            // Observableが発行する値の購読を停止
            Console.WriteLine("dispose method call.");
            subscription1.Dispose();

            // 購読
            // バックグラウンドでの処理自体は既に完了しているので結果をもらうのみ
            Console.WriteLine("subscribe2");
            var subscription2 = invokedSource.Subscribe(
                i => Console.WriteLine("2##OnNext({0})", i),
                ex => Console.WriteLine("2##OnError({0})", ex.Message),
                () => Console.WriteLine("2##Completed()"));
            subscription2.Dispose();

        .. code-block:: csharp

            // 実行結果
            source() call.
            background task start.
            sleep 5sec.
            background task end.
            1##OnNext(1)
            1##Completed()
            dispose method call.
            subscribe2
            2##OnNext(1)
            2##Completed()

メソッドリスト
==============

.. glossary::

    Do

        * https://blog.okazuki.jp/entry/20111128/1322491648
        * IObservableのシーケンスを処理する途中に任意のアクションを実行する
        * 外部に対して副作用を起こすため、Doメソッドの利用は必要最低限にとどめること

        .. code-block:: csharp

            var subject = new Subject<int>();
            subject
                // 途中に処理を挟む
                .Do(i => Console.WriteLine("Do : {0}", i))
                // 購読(購読しないとOnNextをしても値が流れないね)
                .Subscribe(i => Console.WriteLine("OnNext : {0}", i));

            // 値の発行
            subject.OnNext(1);
            subject.OnNext(2);
            subject.OnNext(3);

        .. code-block:: csharp

            // 実行結果
            Do : 1
            OnNext : 1
            Do : 2
            OnNext : 2
            Do : 3
            OnNext : 3

時間に関する情報を付与するTimestampとTimeIntervalメソッド
=========================================================

.. glossary::

    Timestamp

        * https://qiita.com/yutorisan/items/2475eaf5d8c3a6454e3f#fn6
        * https://blog.okazuki.jp/entry/20120205/1328450809
        * タイムスタンプを追加する
        * Timestamp()を通過すると、流れてきた値はTimestamped<T>という構造体にラップされます
        * この構造体はT型のValueプロパティとDateTimeOffset型のTimestampプロパティを持ち、それぞれラップされた値とタイムスタンプを取得できるようになっています 

        .. code-block:: csharp

            Observable.Interval(TimeSpan.FromSeconds(1)) //1秒間隔で値を発行
                      .Take(5)                           //値を5回受け取る
                      .Timestamp()                       //タイムスタンプを付加
                      .Subscribe(t => Console.WriteLine("Value:{t.Value} Time:{t.Timestamp}"),
                                 () => Console.WriteLine("OnCompleted"));

        .. code-block:: csharp

            // 実行結果
            Value:0 Time:2020/09/28 13:27:06 +00:00
            Value:1 Time:2020/09/28 13:27:07 +00:00
            Value:2 Time:2020/09/28 13:27:08 +00:00
            Value:3 Time:2020/09/28 13:27:09 +00:00
            Value:4 Time:2020/09/28 13:27:10 +00:00
            OnCompleted