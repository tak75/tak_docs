=====
LINQ
=====

引用元
======

* C#プログラミング 新スタイルによる実践的コーディング（川俣晶）
* C#プログラムの効率的な書き方 LINQ to Objectsマニアックス（川俣晶）

用語
====

.. glossary::

  LINQ

    Language Integrated Query の略。統合言語クエリ。
    文字列で記述されたクエリでは、その誤りは実行時に初めてエラーとして検出されるが、
    言語に統合されたクエリでは、エラーをコンパイル時に検出できるメリットがある。
    LINQは、元々.NET Framework 3.5 のクラスライブラリでサポートされたクラスライブラリである。
    そして、C#3.0で言語に統合された。
    C#4.0では、Parallel LINQ が導入され、マルチコアでの並列分散処理が容易に書けるようになった。

  LINQ To Objects

    .NET Framework のオブジェクトに対して問合せを行う技術。

遅延実行、即時実行
==================

  .. code-block:: csharp

    // 遅延実行
    var values = new List<string>(){"ABC","DEF","GHI"};
    var res = values.Where(x => x.Contains("A"));
    values.Add("AAA");
    Console.WriteLine(string.Join(",", res1));  // ABC,AAA

    // 即時実行
    var values = new List<string>(){"ABC","DEF","GHI"};
    var res = values.Where(x => x.Contains("A").ToList());
    values.Add("AAA");
    Console.WriteLine(string.Join(",", res1));  // ABC

IEnumerable -> List 変換
========================

  .. code-block:: csharp

    var list = enumerableCollection.ToList();

2次元 -> 1次元 変更
===================

  .. code-block:: csharp

    list1dm = list2dm
      .SelectMany(x => x)
      .OrderBy(x => x.Index)  // OrderByは必要に応じて、かつIndexなどで順番を管理していれば
      .ToList();

辞書型
======

* 辞書型コレクションの値を重複なく取り出し昇順に並び替えリスト化

  .. code-block:: csharp
   
    var groupList = this.SampleDict
      .Select(x => x.Value)
      .Distinct()
      .OrderBy(x => x);       // 昇順に並び替える

* 2次元辞書のデータを全て列挙

  .. code-block:: csharp
   
    public Dictionary<Sensor, Dictionary<int, double>> Data { get; set; }
    this.Data.Values.SelectMany(x => x.Values).Where(x => x.Flag).ToList();

インデックスリストの取得
========================

  .. code-block:: csharp

    // グループチェックされているインデックスリスト
    var indexes = this.GroupIsCheckedCollection
      // 以下は.Select((Value, Index) => new { Value, Index }) でもOK
      .Select((v, i) => new { Value = v, Index = i }) 
      .Where(x => x.Value == true)
      .Select(x => x.Index);

複数条件でのソート
==================

* OrderBy().ThenBy().ThenBy()...で条件をつなげていく

  .. code-block:: csharp

    int[] array = {-2, -1, 0, 1, 2};
    var query = array
                .OrderByDescending(x => Math.Abs(x))  // 条件1
                .ThenByDescending(x => x)             // 条件2
                .Select(x => x);

* 上記と同じ処理内容を、比較オブジェクトを使用して書くことも可能
* 比較の条件が込み入ったときは、その方がスマートになることもある

  .. code-block:: csharp

    class Comparer : ICompare<int>
    {
      public int Compare(int x, int y)
      {
        int result = Math.Abs(x) - Math.Abs(y);
        if(result == 0) return x - y;
        return result;
      }
    }

    static void Main(string[] args)
    {
      int[] array = {-2, -1, 0, 1, 2};
      var query = array.OrderByDescending(x => x, new Compare());
    }

SelectMany
==========

--------------
基本的な使い方
--------------

* https://yaspage.com/cs-linq-selectmany/
* リストの中にあるリストを１つにまとめることができる（平坦化という）
* 以下は上記URLの4例のうちの1例である

  .. code-block:: csharp

    class Program
    {
        public static void Main()
        {
            // SampleDataクラスのリストの宣言と初期化
            List<SampleData> list = new List<SampleData> {
                new SampleData { Name = "a", DataList = new List<int> { 1, 2, 3 } },
                new SampleData { Name = "b", DataList = new List<int> { 4, 5, 6 } },
                new SampleData { Name = "c", DataList = new List<int> { 7, 8, 9 } },
            };

            // SelectManyでリストの中のリストを１つにまとめたものを他の項目と組み合わせる
            var result = list.SelectMany(
                                  data => data.DataList,                                    // (1)
                (data, DataList_value) => new { Name = data.Name, Value = DataList_value }  // (2)
            );
            // 結果を表示
            foreach (var d in result)
            {
                Console.WriteLine("Name={d.Name}, Value={d.Value}");  // 要$
            }
        }
    }

    class SampleData
    {
        public string Name { get; set; }
        public List<int> DataList { get; set; }
    }

    // 出力
    // Name=a, Value=1
    // Name=a, Value=2
    // Name=a, Value=3
    // Name=b, Value=4
    // Name=b, Value=5
    // Name=b, Value=6
    // Name=c, Value=7
    // Name=c, Value=8
    // Name=c, Value=9

----
補足
----

* 2つのシーケンスを入力に持つクエリを実現するために使用される
* 全ての組み合わせが生成される
* 以下は掛け算の九九表の例
* 上記の例と同じ引数2つの使い方であるが、(1)において、
  上記はlist内のDataListを平坦化したコレクションを使用しているのに対して、
  下記は別のコレクションを使用している点がおもしろい

  .. code-block:: csharp

    var list1 = Enumerable.Range(1,9);
    var list2 = Enumerable.Range(1,9);
    var a = list1
            .SelectMany(
                  x => list2,                         // (1) x:list1の要素
              (x,y) => x + "X" + y + "=" + (x * y));  // (2) y:list2の要素

その他参考例
============

  .. code-block:: csharp

    // COMリストの数だけ、接続確認等の処理に使用するデバイスリストを作成する
    // tempDeviceは、タプル内要素に付けた名前
    var comList = MakeComList()
      .Select(comNo => (comNo, tempDevice:new DeviceCommunication(1)))
      .ToList();

    // 接続失敗したCOM番号について、各リストから削除する
    taskList.Where(task => task.Result.result == false)
      .Select(task => comList.Remove
      (
        comList.FirstOrDefault(com => com.comNo == task.Result.comNo)
      ));
