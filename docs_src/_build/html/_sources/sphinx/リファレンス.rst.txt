:tocdepth: 2

リファレンス
============

--------------
インライン記法
--------------

| これは *強調* です。
| これは **強い強調** です。
| これは ``インラインリテラル記法`` です。

実際の記述::

 これは *強調* です。
 これは **強い強調** です。
 これは ``インラインリテラル記法`` です。

------------------------
インライン記法（ロール）
------------------------

| これは :emphasis:`強調` です。
| これは :strong:`強い強調` です。
| これは :literal:`インラインリテラル記法` です。
| これは :sub:`下付き` です。
| これは :sup:`上付き` です。
| これは :title:`タイトル` です。

実際の記述::

 これは :emphasis:`強調` です。
 これは :strong:`強い強調` です。
 これは :literal:`インラインリテラル記法` です。
 これは :sub:`下付き` です。
 これは :sup:`上付き` です。
 これは :title:`タイトル` です。

----
段落
----

これは最初の段落です。
連続した行は同じ段落です。

１行以上空行を入れると、次の段落になります。
同じ段落では改行は無視されます。

実際の記述::

 これは最初の段落です。
 連続した行は同じ段落です。

 １行以上空行を入れると、次の段落になります。
 同じ段落では改行は無視されます。

--------
コメント
--------

文章内の一部の行をコメントアウトします。

.. これはコメントアウトされた文章です。
   続く行（同じインデント）もコメントアウトされます。

   コメントアウトされた文章は、変換の際に読み飛ばされます。

この行はコメントではありません。

実際の記述::

 文章内の一部の行をコメントアウトします。

 .. これはコメントアウトされた文章です。
    続く行（同じインデント）もコメントアウトされます。

    コメントアウトされた文章は、変換の際に読み飛ばされます。

 この行はコメントではありません。

------------
セクション名
------------

セクション名の装飾には :strong:`=` や :strong:`-` 以外にも様々な記号が使用できる。
ただし、見やすさの観点から、上記や :strong:`+` や :strong:`#` や :strong:`*` などが推奨されている。

記述方法::

 ======
 h1相当
 ======

 h2相当
 ======

 ------
 h3相当
 ------

 h4相当
 ------

------------------------
ページ内目次（contents）
------------------------

以下のように記述することで、それ以降のページ内目次を自動的に作成する。::

 .. contents::
    :local:

------------------
リスト、サブリスト
------------------

* 日時
* 場所
* 参加者

  * DS1
  * DS2

実際の記述::

 * 日時
 * 場所
 * 参加者

   * DS1
   * DS2

--------------
番号付きリスト
--------------

1. 日時
2. 場所
3. 参加者
   
   (1) DS1
   (2) DS2

実際の記述::

 1. 日時
 2. 場所
 3. 参加者 

    (1) DS1 （(1),(2),,ではんく、1),2),,や、A.,B.,,などでもOK）
    (2) DS2

以下のように自動採番もできる。

#. 日時
#. 場所
#. 参加者
   
   (#) DS1
   (#) DS2

実際の記述::

 #. 日時
 #. 場所
 #. 参加者
   
    (#) DS1
    (#) DS2

----------
定義リスト
----------

定義リストは用語と説明書きを続けて書く。説明書きは用語の次の行にインデントを一段深くして書く。

定義1
  これは定義1の説明です。

定義2
  これは定義2の説明です。
  次は定義3です。

実際の記述::

 定義1
   これは定義1の説明です。

 定義2
   これは定義2の説明です。
   次は定義3です。

----
画像
----

.. figure:: images/DINOSAUR.jpg
   :width: 240px
   :name: DINOSAUR

   B'z アルバム「DINOSAUR」

   これは2017年に発売されたアルバムです。

実際の記述::

 .. figure:: images/DINOSAUR.jpg
    :width: 240px
    :name: DINOSAUR

    B'z アルバム「DINOSAUR」              // キャプション

    これは2017年に発売されたアルバムです。  // 説明文

パスは、/から始めると、プロジェクトルートから辿って読み込む。
それ以外はソースファイルからの相対パスで読み込む。

figureディレクティブの主なオプションは　:numref:`figureディレクティブの主なオプション` の通り。

.. csv-table:: figureディレクティブの主なオプション
   :name: figureディレクティブの主なオプション
   :header-rows: 1

   オプション名, 概要
   align, 画像の表示位置を左（left）、中央（center）、右（right）から選択する
   alt, 画像の説明を指定する
   width, 画像をリサイズする。画像の幅をpx単位で指定する（例：120px）
   height, 画像をリサイズする。画像の高さをpx単位で指定する（例：120px）
   scale, 画像をリサイズする。画像の大きさを%で指定する（例：50%）
   target, 画像にリンクを張る。リンク先のURLを指定する

.. note:: 
   出力形式に適した画像を自動選択することが可能。
   「.. figure:: images/DINOSAUR.*」
   のように、拡張子に"*"を使用する。
   例えば、DINOSAUR.png と DINOSAUR.svg の2つのファイルを準備しておけば、
   html と EPUB の場合は svg 画像が、pdf の場合は png 画像が使用される。

----------------------------
図表番号による参照（numref）
----------------------------

B'zのアルバムは :numref:`DINOSAUR` を参照のこと。

実際の記述::

 B'zのアルバムは :numref:`DINOSAUR` を参照のこと。

図表番号の機能を有効にするには conf.py に以下の設定を1行追加すること。::

 numfig = True

---------------------------
ハイパーリンク、URL、email
---------------------------

これらは、各アドレスを文中にそのまま書くだけで自動的にリンク表記となる。

--------------------------------------------------------
外部ハイパーリンクターゲット、名前付きハイパーリンク参照
--------------------------------------------------------

.. _Yahoo: https://office.yahoo.co.jp/
.. _Yahoo Japan: https://office.yahoo.co.jp/
.. _ヤフージャパン: https://office.yahoo.co.jp/

* Yahoo_ のアドレス
* `Yahoo Japan`_ のアドレス
* `ヤフージャパン`_ のアドレス

実際の記述::

 // まず、名前付きハイパーリンクの URL を定義する
 .. _Yahoo: https://office.yahoo.co.jp/
 .. _Yahoo Japan: https://office.yahoo.co.jp/
 .. _ヤフージャパン: https://office.yahoo.co.jp/

 // ついで、名前付きハイパーリンク参照を使う
 * Yahoo_ のアドレス
 * `Yahoo Japan`_ のアドレス（スペース付の場合は``で囲む）
 * `ヤフージャパン`_ のアドレス（日本語の場合は``で囲む）

定義、参照の記載とも、半角スペースに注意すること

-----------------------
名前なしハイパーリンク
-----------------------

.. __: https://office.yahoo.co.jp/
.. __: https://weather.yahoo.co.jp/

Yahooサイト__ と 天気予報サイト__ 

実際の記述::

 // まず、URLを定義する
 .. __: https://office.yahoo.co.jp/
 .. __: https://weather.yahoo.co.jp/

 // 定義した順で参照する
 Yahooサイト__ と 天気予報サイト__ 

-----------------
埋め込みURL記法
-----------------

* `Yahoo <https://office.yahoo.co.jp/>`__ のアドレス
* `Yahoo Japan <https://office.yahoo.co.jp/>`__ のアドレス
* `ヤフージャパン <https://office.yahoo.co.jp/>`__ のアドレス

実際の記述::

 * `Yahoo <https://office.yahoo.co.jp/>`__ のアドレス
 * `Yahoo Japan <https://office.yahoo.co.jp/>`__ のアドレス
 * `ヤフージャパン <https://office.yahoo.co.jp/>`__ のアドレス

_（アンダスコア）を1つにして `Yahoo Japan <https://office.yahoo.co.jp/>`_ 
と記述すると、ハイパーリンクを作ると同時に `Yahoo Japan`_ という
ハイパーリンクターゲットも作成される。

実際の記述::

 _（アンダスコア）を1つにして `Yahoo Japan <https://office.yahoo.co.jp/>`_ 
 と記述すると、ハイパーリンクを作ると同時に `Yahoo Japan`_ という
 ハイパーリンクターゲットも作成される。

------------------------
インライン内部ターゲット
------------------------

１章
----

文章中の文字列にターゲットを設定する。
例「これを _`特定の単語` と言う」

２章
----

別のところからターゲットを設定したところへリンクを書ける。
例「詳しくは、 `特定の単語`_ を参照のこと」

実際の記述::

 例「これを _`特定の単語` と言う」
 例「詳しくは、 `特定の単語`_ を参照のこと」

------
ラベル
------

.. _my-label:

１章
----

これは１章の文章。

２章
----

my-label_ を参照のこと。
`こちらも参照のこと <my-label_>`__ 。

実際の記述::

 // 任意の箇所にラベルをつける
 .. _my-label:

 １章
 ----
 
 これは１章の文章。 
 
 ２章
 ----

 my-label_ を参照のこと。
 `こちらも参照のこと <my-label_>`__ 。

※この参照は、 **同じファイル内** でのみ有効。

-------------------------
クロスリファレンス（ref）
-------------------------

.. _my-label2:

１章
----

これは１章の文章。

２章
----

* :ref:`my-label2` を参照のこと。
* :ref:`いっしょう<my-label2>` を参照のこと。

実際の記述::

  .. _my-label2:

  １章
  ----

  これは１章の文章。

  ２章
  ----

  * :ref:`my-label2` を参照のこと。            // リンクタイトルにラベル部のセクション名を使用
  * :ref:`いっしょう<my-label2>` を参照のこと。 // リンクタイトルを指定

※この参照は、 **複数のファイル** をまたいで有効。

.. note:: ラベルはプロジェクト全体を通して、重複してはいけない。

-------------------------------
別原稿ファイルへのリンク（doc）
-------------------------------

備忘録.rst へのリンクを張りたい場合は、 :doc:`備忘録` と書く。
ディレクトリが異なる場合は、相対パス :doc:`B'z/index` での指定も可能。

実際の記述::

 備忘録.rst へのリンクを張りたい場合は、 :doc:`備忘録` と書く。
 ディレクトリが異なる場合は、相対パス :doc:`B'z/index` での指定も可能。

---------------------------------
ダウンロード用リンク（download）
---------------------------------

アンパンマン.pdf へのリンクを張りたい場合は、 :download:`アンパンマン.pdf` と書く。

実際の記述::

 アンパンマン.pdf へのリンクを張りたい場合は、 :download:`アンパンマン.pdf` と書く。

---------------
ラインブロック
---------------

| 改行を維持する方法。
| 2行目。
  これは2行目の続き
| これは3行目。

実際の記述::

 | 改行を維持する方法。
 | 2行目。
   これは2行目の続き
 | これは3行目。

-------------
引用ブロック
-------------

文献から文章を引用する場合に使う。

物語は次の一行からはじまります。

  トンネルを抜けるとそこは雪国であった。

引用ブロックの内部は段落として解釈される。

  段落として解釈されるので
  改行は無視される
  reStの記法も **使うことが** *できる* 。

実際の記述::

 物語は次の一行からはじまります。

   トンネルを抜けるとそこは雪国であった。

 引用ブロックの内部は段落として解釈される。

   段落として解釈されるので
   改行は無視される
   reStの記法も **使うことが** *できる* 。

-------------------------
クォートリテラルブロック
-------------------------

メールの引用などを記述する。

2018/2/1 Aさんのメールより::

>> ありがとう
>
> どういたしまして

実際の記述::

 2018/2/1 Aさんのメールより::

 >> ありがとう
 >
 > どういたしまして

.. _literal_code_block_label:

----------------------------
リテラルコードブロック（::）
----------------------------

::

  "::"の次に1行分空行を入れて、インデントを深くする。
  リテラルコードブロックの中での改行は
  維持されたまま変換される。
  reStの記法は **使えない**。

"::"記号は文章の末尾に書くこともできる::

  末尾に書いた場合は "::" の2つのうちの1つが表示される

実際の記述::

 ::

   "::"の次に1行分空行を入れて、インデントを深くする。
   リテラルコードブロックの中での改行は
   維持されたまま変換される。
   reStの記法は **使えない**。

 "::"記号は文章の末尾に書くこともできる::

   末尾に書いた場合は "::" の2つのうちの1つが表示される

-----------------------------
コードブロック（code-block）
-----------------------------

コンソールの場合

.. code-block:: console

  $ irb
  > 

pythonの場合

.. code-block:: python

   import wx

   class Base(object):
       basecolr = (255, 255, 255)

c言語の場合

.. code-block:: c

   int func_a(int* a, int const b)
   {
       static int c = 0;
       *a = c++;
   }

c#言語の場合

.. code-block:: csharp

  class TextClass
  {
    public void method()
    {
    }
  }

XMLやXamlの場合

.. code-block:: XML

    <RepeatButton Content="0回" Click="Button_Click" 
                  Delay="1000" 
                  Interval="2000" />

rubyの場合

.. code-block:: ruby

  def new
    # モデル"Task"のレコードを1つ作成して、テンプレート変数"@task"に入れる
    @task = Task.new
  end

erbテンプレートエンジンの場合

.. code-block:: html+erb

  <h1>ToDoアプリ</h1>
  <ul>
    <% @tasks.each do |task| %>
      <li>
        <%= check_box_tag '', '' %>
        <%= task.title %>
      </li>
    <% end %>
  </ul>

実際の記述::

 コンソールの場合

 .. code-block:: console

    $ irb
    >

 pythonの場合

 .. code-block:: python

    import wx

    class Base(object):
        basecolr = (255, 255, 255)

 c言語の場合

 .. code-block:: c

    int func_a(int* a, int const b)
    {
        static int c = 0;
        *a = c++;
    }

 c#言語の場合

 .. code-block:: csharp

    class TextClass
    {
      public void method()
      {
      }
    }

 XMLやXamlの場合

 .. code-block:: XML

    <RepeatButton Content="0回" Click="Button_Click" 
                  Delay="1000" 
                  Interval="2000" />

 rubyの場合

  .. code-block:: ruby

    def new
      # モデル"Task"のレコードを1つ作成して、テンプレート変数"@task"に入れる
      @task = Task.new
    end

 erbテンプレートエンジンの場合

  .. code-block:: html+erb

    <h1>ToDoアプリ</h1>
    <ul>
      <% @tasks.each do |task| %>
        <li>
          <%= check_box_tag '', '' %>
          <%= task.title %>
        </li>
      <% end %>
    </ul>


-------------------------------
コードの引用（literalinclude）
-------------------------------

外部ファイルを読み込み、その内容をソースコードとしてハイライトして埋め込む。

.. literalinclude:: test_code.py

実際の記述::

 .. literalinclude:: test_code.py

----------------------------------
パースドリテラル（parsed-literal）
----------------------------------

ソースコードなどを文章の中に埋め込む。
:ref:`literal_code_block_label` との違いは、インライン要素がreSTとして解釈されること。

.. parsed-literal::

  この中では、 **reST記法** も使用できる。
  改行は
  維持される。
    
※内部でreST記法を使うと、背景色がなくなってしまうっぽい。使わなければ他のものと同じ（薄い緑）。

実際の記述::

 .. parsed-literal::

   この中では、 **reST記法** も使用できる。
   改行は
   維持される。

-------------------------
CSVテーブル（csv-table）
-------------------------

.. csv-table:: タイトル
   :header-rows: 1
   :widths: 3, 5, 3

   ツールの名前,開発者,バージョン
   Python,Guido va Rossum,3.6.2
   Sphinx,Georg Brandl,1.6.4

実際の記述::

 .. csv-table:: タイトル
    :header-rows: 1
    :widths: 3, 5, 3

    ツールの名前,開発者,バージョン
    Python,Guido va Rossum,3.6.2
    Sphinx,Georg Brandl,1.6.4

.. note:: "widths"で指定する値はピクセル数ではなく比率みたい

csvファイルを読み込むことも可能。

.. csv-table:: タイトル
   :file: csv_test.csv
   :header-rows: 1

実際の記述::

 .. csv-table:: タイトル
    :file: csv_test.csv
    :header-rows: 1

---------------------------
excelテーブル（exceltable）
---------------------------
excelファイルを読み込むこともできる。

.. exceltable:: タイトル
   :file: excel_test.xls
   :header: 1
   :selection: B3:D5
   :sheet: test

実際の記述::

  .. exceltable:: タイトル
    :file: excel_test.xls
    :header: 1
    :selection: B3:D5
    :sheet: test    # シート番号（例：1）でもシート名でもOK

ただし、exceltableモジュールのインストールが必要。
方法は、Anaconda Prompt を開き::

  pip install sphinxcontrib-exceltable

そして、conf.py ファイルに以下を追記する::

  extensions = ['sphinxcontrib.exceltable']

なお、セル結合はできないみたい。

http://pythonhosted.org/sphinxcontrib-exceltable/#setup

----------------------------
リストテーブル（list-table）
----------------------------

.. list-table:: タイトル
   :header-rows: 1

   * - ツールの名前
     - 開発者
     - バージョン
   * - Python
     - Guido va Rossum
     - 3.6.2
   * - Sphinx
     - Georg Brandl
     - 1.6.4

実際の記述::

 .. list-table:: タイトル
    :header-rows: 1

    * - ツールの名前
      - 開発者
      - バージョン
    * - Python
      - Guido va Rossum
      - 3.6.2
    * - Sphinx
      - Georg Brandl
      - 1.6.4

.. _field_list_label:

-----------------
フィールドリスト
-----------------

見出しと内容のペアを使って簡単な表を作る。

各種バージョン一覧

:OS: CentOS 6.4
:Python: 2.7.1
:Sphinx: 1.6.4

実際の記述::

 各種バージョン一覧

 :OS: CentOS 6.4
 :Python: 2.7.1
 :Sphinx: 1.6.4

--------
docinfo
--------

:ref:`field_list_label` をファイルの先頭、セクション名よりも前に書くと、docinfoとして扱われる。::

 :tocdepth: 2
 と記載することで、サイドバーに表示される目次の最大深さを指定できる。

--------------------
TOCツリー（toctree）
--------------------

.. toctree::
   :maxdepth: 2
   
   B'z/index
   sample/index

実際の記述::

 .. toctree::
    :maxdepth: 2
   
    B'z/index
    sample/index

----
脚注
----

Sphinx [1]_ はPython [2]_ 製のドキュメントツールです。

.. [1] 脚注1です。
.. [2] 脚注2です。

実際の記述::

 Sphinx [1]_ はPython [2]_ 製のドキュメントツールです。

 .. [1] 脚注1です。
 .. [2] 脚注2です。

自動採番の方法は以下の通り。

Sphinx [#sphinx]_ はPython [#python]_ 製のドキュメントツールです。
脚注の参照は、出現順に関係なく何度でもできる [#sphinx]_

.. [#sphinx] #sphinxに対する脚注です。
.. [#python] #pythonに対する脚注です。

実際の記述::

 Sphinx [#sphinx]_ はPython [#python]_ 製のドキュメントツールです。
 脚注の参照は、出現順に関係なく何度でもできる [#sphinx]_

 .. [#sphinx] #sphinxに対する脚注です。
 .. [#python] #pythonに対する脚注です。

以下の記述も可能。

Sphinx [#]_ はPython [#]_ 製のドキュメントツールです。

.. [#] 1番目の#に対する脚注です。
.. [#] 2番目の#に対する脚注です。

実際の記述::

 Sphinx [#]_ はPython [#]_ 製のドキュメントツールです。

 .. [#] 1番目の#に対する脚注です。
 .. [#] 2番目の#に対する脚注です。

--------
引用参照
--------

Sphinx の入門本 [SPHINX2013]_ では次のように説明している。

  Sphinx の公式ドキュメントも Sphinx で書かれています。

.. [SPHINX2013] Sphinx をはじめよう（2013, オライリー・ジャパン刊）
 
実際の記述::

 Sphinx の入門本 [SPHINX2013]_ では次のように説明している。

   Sphinx の公式ドキュメントも Sphinx で書かれています。

 .. [SPHINX2013] Sphinx をはじめよう（2013, オライリー・ジャパン刊）

----
注釈
----

.. note:: これは注釈です

.. warning:: これは警告です

実際の記述::

 .. note:: これは注釈です

 .. warning:: これは警告です

------------
数式（math）
------------

文章中に数式を、 :math:`A_\text{c} = (\pi/4) d^2` のように書ける。

数式を別行に書き番号を振りたい場合は、以下のようにする。

.. math::
   A_\text{c} = (\pi/4) d^2

実際の記述::

  文章中に数式を、 :math:`A_\text{c} = (\pi/4) d^2` のように書ける。

  数式を別行に書き番号を振りたい場合は、以下のようにする。

  .. math::
    A_\text{c} = (\pi/4) d^2

ただし、数式を使うためには conf.py に以下の記述が必要::

  # math拡張を使用するため追加
  extensions = ['sphinx.ext.mathjax']

  # 数式に番号を振るため追加
  math_number_all = True

-----------------
オプションリスト
-----------------

-a            コマンドラインオプション "a"
-b file       オプションは引数と、この文の
              ような複数行の説明を持てる
--long        長い形式のオプション
--input=file  長い形式のオプションも引数を持てる
/va           DOS/VMS スタイルのオプション

実際の記述::

  -a            コマンドラインオプション "a"
  -b file       オプションは引数と、この文の
                ような複数行の説明を持てる
  --long        長い形式のオプション
  --input=file  長い形式のオプションも引数を持てる
  /va           DOS/VMS スタイルのオプション

.. note::
   * オプションと説明文の間には、スペース2つ以上開けること
   * 説明文の開始位置は揃える必要はない
   * オプション先頭の'-'や'/'がないとエラーとなる

----
置換
----

たとえば、 |tody| を今日の日付を表すに置き換える。
文中に |menu| 画像をインラインで埋め込む際にも使える。

.. |tody| replace:: 2018年2月4日
.. |menu| image:: images/menu.png

さらに |#1234|_ のように、文字列置換とリンクを同時に行える。

.. |#1234| replace:: #1234 ロゴがずれる
.. _#1234: https://example.com/issues/1234

実際の記述::

  たとえば、 |tody| を今日の日付を表すに置き換える。
  文中に |menu| 画像をインラインで埋め込む際にも使える。

  .. |tody| replace:: 2018年2月4日
  .. |menu| image:: images/menu.png

  さらに |#1234|_ のように、文字列置換とリンクを同時に行える。

  .. |#1234| replace:: #1234 ロゴがずれる
  .. _#1234: https://example.com/issues/1234

ただし、置換の定義と参照は同じ **ファイル内でのみ** 有効。

------------------
用語集（glossary）
------------------

glossary ディレクティブで、用語とその説明を定義する。
定義された用語は term ロールで参照する。

.. glossary::

   Sphinx
      Sphinx は :term:`原稿` を読み込んで、さまざまなフォーマットに
      ドキュメントを変換するツール。
  
   原稿
      ドキュメントの中身が書かれたでき須戸ファイル。

実際の記述::

  .. glossary::

    Sphinx
        Sphinx は :term:`原稿` を読み込んで、さまざまなフォーマットに
        ドキュメントを変換するツール。
    
    原稿
        ドキュメントの中身が書かれたでき須戸ファイル。

----------------
用語参照（term）
----------------

同じファイル内でなくても、Sphinx プロジェクト内で定義された用語であればどこからでも参照できる。

本文書は :term:`Sphinx` を利用して作成した。

実際の記述::

  本文書は :term:`Sphinx` を利用して作成した。

-----------------------
インクルード（include）
-----------------------

外部ファイルを読み込み、その内容を reST ドキュメントソースとして解釈する。
外部のファイルに書かれた reST ドキュメントを利用したい場合や、複数のページに同じ内容を埋め込む場合に使用する。

記述方法::

  .. include:: memo.rst

---
raw
---

HTML本来の記述を行いたい場合に使用する。

.. raw:: html

   <a href="../_images/DINOSAUR.jpg">画像へのリンク</a>

実際の記述::

  .. raw:: html

     <a href="../_images/DINOSAUR.jpg">画像へのリンク</a>

.. note::

   ただし、画像や動画へのリンクを行う場合は、ビルド後に保管される画像や動画への相対パスを指定する必要があり、ディレクトリ構造が変わるとパスを変える必要があり注意が必要。

--------------
エスケープ文字
--------------

「\*」や「\#」を出力したい場合はエスケープ文字「\\（バックラッシ）」を使用する。

実際の記述::

  「\*」や「\#」を出力したい場合はエスケープ文字「\\（バックラッシ）」を使用する。
