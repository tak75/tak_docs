==============
テスト駆動開発
==============

情報１
======

--------
はじめに
--------

* Visual Studio 2017を使用する。

------------------
テスト駆動開発とは
------------------

* テストコード -> 本番コード の順に実装する

  #.  本番コードのプロジェクトをソリューションに追加する（例：TDD.UI）
  #.  テストコードのプロジェクトをソリューションに追加する（例：TDDTest.Tests）
  #.  本番コードのプロジェクトにクラスを追加する（例：Calculation.cs）
  #.  テストコードを書く（UnitTest1.cs）
      （関数名は日本語で構わない。
      以下の例では、表示の都合上コメントアウトしているが、実際は/\* \*/は不要）

      .. code-block:: csharp

        [TestMethod]
        public void /*平均値を取得できる*/()
        {
          var list = new List<int> { 1, 2, 3, 4, 5 };
          // 作成したい関数を"Ave"とする
          var result = TDD.UI.Calculation.Ave(list);
          // 出力値と期待される結果を比較し、一致していればOKとする
          Assert.AreEqual(3, result);
        }

  #.  "Ave" は未定義関数であるため、赤いラインが付く。
      ここにカーソルを移動し、"Ctrl" + "." を入力し、Enter キーを押す。
      これにより、スケルトンコードが生成される（Calculation.cs）

      .. code-block:: csharp

        public static object Ave(List<int> list)
        {
            throw new NotImplementedException();
        }

  #.  スケルトンコードを実装する

      .. code-block:: csharp

        public static int Ave(List<int> list)
        {
            int values = 0;
            foreach(var val in list)
            {
                values += val;
            }
            return values / list.Count;
        }

  #.  テスト -> ウィンドウ -> テスト エクスプローラー を表示する
  #.  すべて実行をクリックしテストする。全て成功となればOK

  .. warning::

    テストコード先頭の[TestMethod]が記載されているコードをテストコードとして認識する。
    [TestMethod]を削除するとテストされないので要注意。
    このため、スケルトンコード実装前に、一度テストを実行し失敗することを確認するのがよい。

------------
Moq について
------------

* NuGetでインストールするライブラリである
* DBに接続しDBからの取得した値を使ってテストする場合などでは、以下が必要となるが、Moqを使うことで仮想的な環境を作成することができる

  * 実環境をローカルに構築する必要がある
  * テスト用のテーブルをDBに作成する必要がある

* Moqに対応させるためのコーディングは以下の通り

  * DBクラスのインタフェース(IDB)を作成し、DBクラスはIDBインタフェースを継承させる
  * DBオブジェクトを使用するクラスでは、コンストラクタの引数にて、外部からDBオブジェクトを設定してもらう
  * このDBオブジェクトに、実環境では"new DB()"を使い、テスト環境では"mock.Object"を使う
  * mockは以下のコードのようにセットアップすることで、テスト用の返却値を設定する

    .. code-block:: csharp

      var mock = new Mock<IDB>();

      // GetDBValue() の返却値を 100 にセットアップする
      mock.Setup(x => x.GetDBValue()).Returns(100);
      
      // テストコードでは、コンストラクタの引数に "mock.Object" を渡す
      var viewModel = new Form1ViewModel(mock.Object);

---------------------------
Chaining Assertion について
---------------------------

* NuGetでインストールするライブラリである
* 例外をテストする際に利用する
* 本ライブラリを使用しない場合は、例外のテストは、以下のコードのように、
  [ExpectedException]属性を付け例外専用のテスト関数を作る必要がある。

  .. code-block:: csharp

    [TestMethod]
    [ExpectedException(typeof(InputException))]
    public void 例外のテスト()
    {
        Assert.AreEqual(2, Form1ViewModel.Add(-1, 3));
    }

* 本ライブラリを使用する場合は以下のコードとなる。

  .. code-block:: csharp

    [TestMethod]
    public void 通常のテスト()
    {
        var ex = AssertEx.Throws<InputException>(() => Form1ViewModel.Add(-1, 3));
    }

* また、本ライブラリを使用すると、AreEqual は Is に置き換えられる。

  .. code-block:: csharp

    // 以下の2つは同じ内容のコード
    Assert.AreEqual("107", viewModel.ResultLabelText);
    viewModel.ResultLabelText.Is("107");

-----------------
AxoCover について
-----------------

* 対応はVS2017まで？VS2019は未対応？
* テストの完了率を確認することができる
* if文などで複数分岐している箇所は、各々の箇所が1つのテストとカウントされる

xUnit
=====

-------------
参考Webサイト
-------------

* `xUnit.net でユニットテストを始める <https://qiita.com/takutoy/items/84fa6498f0726418825d>`__
