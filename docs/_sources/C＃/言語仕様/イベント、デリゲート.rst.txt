====================
イベント、デリゲート
====================

トリガ、イベント、ハンドラ
==========================

* トリガとは、イベントを発行させるための外部動作のこと。例えば、マウスクリックなど
* トリガ -> イベント -> ハンドラ　の順に生じる
* マウスクリック -> クリックイベント -> クリックイベントハンドラ（実処理）

イベント
========

* EventHandler 型はデリゲート型である。
* よって、下記コードで event を削除し、handlerの登録を+=ではなく=とすると、デリゲート呼び出しになる。
* イベントハンドラは必ずvoid型であること
* 戻り値ありとなる場合は、デリゲート呼び出し（委譲メソッド）を検討すること

  .. code-block:: csharp

    class Sample
    {
        // イベント定義（デフォルトでイベントフックしておきたい場合）
        // デフォルトのイベントハンドラを登録しておけば、デバッグに便利
        public event EventHandler<CommandSentEventArgs> CommandSent 
            = (s, e) => System.Diagnostics.Debug.WriteLine("CommandSent");

        private void Send(List<byte> byteList)
        {
            CommandSent(this, new CommandSentEventArgs(byteList));
            
            // 以下でもよい？
            CommandSent?.Invoke(this, new CommandSentEventArgs(byteList));
        }
    }

    // イベント引数クラス
    public class CommandSentEventArgs : EventArgs
    {
        public List<byte> ByteList { get; private set; }

        public CommandSentEventArgs(List<byte> byteList)
        {
            this.ByteList = byteList;
        }
    }

    class Program
    {
        private string SendReceiveHistory = "";

        // イベントハンドラメソッド
        private void WriteSendHistory(object sender, CommandSentEventArgs e)
        {
            this.SendReceiveHistory += System.BitConverter.ToString(e.ByteList.ToArray());
        }

        void Main(string[] args)
        {
            var sample = new Sample();
            // イベントハンドラ登録
            sample.CommandSent += WriteSendHistory;

            var byteList = new List<byte>();
            // byteList.Add(・・); ・・・・
            sample.Send(byteList);
        }
    }

デリゲート
==========

* Action : 任意個の引数を取り、かつ、戻り値のないメソッドへのDelegate
* Func : 任意個の引数を取り、かつ、戻り値のあるメソッドへのDelegate
* Predicate : 任意個の引数を取り、かつ、戻り値の型がBooleanであるメソッドへのDelegate。つまり、Func<T,bool>などに相当 

デリゲート呼び出し
==================

  .. code-block:: csharp

    Func<int> func = () => 1;
    func += () => 2;            // 複数登録を防ぐことができない
    Console.WriteLine(func());  // 2が出力
                                // 複数登録の場合、最後に登録されたもののみが有効

ラムダ式
========

* "=>"" は"ゴーズ・トゥー"と読む
* 左辺のパラメータの書き方

  * 0個 : () => XXX
  * 1個 : s => XXX
  * 複数 : (a,b) => a.XX && b.xx

* 右辺が式のみの場合は return を書かなくてよい

  .. code-block:: csharp

    class Program
    {
        private static void b(Action sample)
        {
            sample();
        }
        static void Main(string[] args)
        {
            b(() => 
            {
               Console.WriteLine("I'm a method!");
            });
        }
    }

* `多分わかりやすいC#のDelegateとラムダ式入門 <https://tech-lab.sios.jp/archives/15318>`__
* ラムダ式により、Delegateが不要となった
* 変遷としては、①Delegate -> ②Action、Func -> ③ラムダ式＋Action、Func
* ラムダ式無名関数が長い処理の場合や、他でも利用されている場合などは、②がよいと思われる
* ①Delegate

  .. code-block:: csharp

    class Program
    {
        public delegate void Callback(HttpResponseMessage res);
    
        static void Main(string[] args)
        {
            Callback callback = GetStatusCode;
            HttpRequest("http://www.yahoo.co.jp/",callback);
            Console.ReadLine();
        }
    
        static void GetStatusCode(HttpResponseMessage res)
        {
            Console.WriteLine(res.StatusCode.ToString());
        }
    
        async static void HttpRequest(String url,Callback callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

* ②Action、Func

  .. code-block:: csharp

    class Program
    {
        static void Main(string[] args)
        {
            HttpRequest("http://www.yahoo.co.jp/", GetStatusCode);
            Console.ReadLine();
        }
    
        static void GetStatusCode(HttpResponseMessage res)
        {
            Console.WriteLine(res.StatusCode.ToString());
        }
    
        async static void HttpRequest(String url, Action<HttpResponseMessage> callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

* ③ラムダ式＋Action、Func

  .. code-block:: csharp

    class Program
    {
        static void Main(string[] args)
        {
            HttpRequest("http://www.yahoo.co.jp/", (res) => {
                Console.WriteLine(res.StatusCode.ToString());
            }); 
            Console.ReadLine();
        }
    
        async static void HttpRequest(String url, Action<HttpResponseMessage> callback)
        {
            using (HttpClient httpClient = new HttpClient())
            {
                HttpResponseMessage res = await httpClient.GetAsync(url);
                callback(res);
            }
        }
    }

子イベントを親に透過
====================

透過させるのがベストの場合は以下でよいが、新たなイベントを作成して発火させる方法でもよい。

  .. code-block:: csharp

    this.dataGrid.AddHandler(DataGrid.MouseUpEvent, new MouseButtonEventHandler((sender,e)=> {/* ～～; */}), true);

デリゲートとイベント処理（C# 1.0）
==================================

* C#で宣言される型には、クラス、構造体、列挙体、インタフェース、デリゲートの5種がある。
  デリゲートは型の一種とみなされる。
  型であるデリゲートは、独立して宣言され、様々なクラスから参照される
* デリゲート型変数は関数を入れるための変数である

  .. code-block:: csharp

    // デリゲートの宣言
    public delegate void SampleDelegate(int x);
    class DelegateFirst
    {
        static vboid Reverse(int n){Console.Write(-n);}
        static void Main()
        {
           // デリゲート型変数の宣言
            SampleDelegate d = Revarse;
            d(3);       // 結果：-3
        }
    }

* 複数のメソッドを登録しておき、一度の呼び出しでまとめて実行する機能（マルチキャスティング）がある
* 例１：データを返さないイベントの場合（推奨は、方法2 > 方法1 の順）。
  EventHandlerデリゲートと、EventArgsクラスを使うことで、デリゲート宣言と、返すデータのクラスの宣言を省略できる。

  * 方法1

    .. code-block:: csharp

        // イベントを発生する側のクラス
        public class SleepClass
        {
            // データを持たないイベントデリゲートの宣言
            //ここでは"Time"というイベントデリゲートを宣言する
            public event EventHandler Time;

            public void Start()
            {
                System.Threading.Thread.Sleep(5000);
                if (Time != null)
                {
                    //"Time"イベントの発生
                    Time(this, EventArgs.Empty);
                }
            }
        }

    .. code-block:: csharp

        // イベントを受取り処理を行う側のクラス
        private void button1_Click(object sender, System.EventArgs e)
        {
            SleepClass clsSleep = new SleepClass();
            //イベントハンドラの追加
            clsSleep.Time += new EventHandler(this.SleepClass_Time);
            clsSleep.Start();
        }

        private void SleepClass_Time(object sender, System.EventArgs e)
        {
            //イベントが発生したとき
            MessageBox.Show("OK!");
        }

  * 方法2（イベントを受取り処理を行う側のクラスについては方法1と同様）

    .. code-block:: csharp

        // イベントを発生する側のクラス
        public class SleepClass
        {
            // データを持たないイベントデリゲートの宣言
            public event EventHandler Time;

            // SleepClassを継承して新たなクラスを作ることを考えるとvirtualにした方がよい
            protected virtual void OnTime(EventArgs e)
            {
                if (Time != null)
                {
                    Time(this, e);
                }
            }

            public void Start()
            {
                System.Threading.Thread.Sleep(5000);
                OnTime(EventArgs.Empty);
            }
        }

* 例２：データを返すイベントの場合

  .. code-block:: csharp

    // イベントを発生する側のクラス
    //Timeイベントで返されるデータ
    //ここではstring型のひとつのデータのみ返すものとする
    public class TimeEventArgs : EventArgs
    {
        public string Message;
    }

    public class SleepClass
    {
        //デリゲートの宣言
        //TimeEventArgs型のオブジェクトを返すようにする
        public delegate void TimeEventHandler(object sender, TimeEventArgs e);
        
        //イベントデリゲートの宣言
        public event TimeEventHandler Time;
        
        protected virtual void OnTime(TimeEventArgs e)
        {
            if (Time != null)
            {
                Time(this, e);
            }
        }
        
        public void Start()
        {
            System.Threading.Thread.Sleep(5000);
            //返すデータの設定
            TimeEventArgs e = new TimeEventArgs();
            e.Message = "終わったよ。";
            //イベントの発生
            OnTime(e);
        }
    }

  .. code-block:: csharp

    // イベントを受取り処理を行う側のクラス
    private void button1_Click(object sender, System.EventArgs e)
    {
        SleepClass clsSleep = new SleepClass();
        clsSleep.Time += new SleepClass.TimeEventHandler(this.SleepClass_Time);
        clsSleep.Start();
    }

    private void SleepClass_Time(object sender, TimeEventArgs e)
    {
        //返されたデータを取得し表示
        MessageBox.Show(e.Message);
    }

.. warning::

  EventArgsの派生クラスを使わない方法でも動作はするが、EventArgsの派生クラスを使った方法が
  .NETでは推奨された方法なので、使うべきではない。

  .. code-block:: csharp

    //デリゲートの宣言（非推奨の方法！）
    public delegate void TimeEventHandler(string message, int number);