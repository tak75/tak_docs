====
仕様
====

`【C# 機能別】知らん書き方が出てきたらこれを見ろ！C# 10 までの進化を1ページで <https://oita.oika.me/2021/12/23/csharp-10-history>`__

C# 1.0からの仕様
================


C# 2.0からの仕様
================

部分型
ジェネリクス
静的クラス
yieldキーワード
匿名デリゲート
プロパティに対する個別のアクセス制御
Null許容型とnull結合演算子

C# 3.0からの仕様
================

-------------
varキーワード
-------------

* ローカル変数でのみ利用可能

拡張メソッド
部分メソッド


オブジェクト
初期化の簡略化
自動実装プロパティ
匿名型
配列宣言の型省略
クエリ式

C# 4.0からの仕様
================

dynamicキーワード
オプション引数・名前付き引数
ジェネリクスの共変性・反変性

C# 5.0からの仕様
================

C# 6.0からの仕様
================

----------
文字列補間
----------

* 先頭に「$」記号が付いた文字列
* その中の波かっこ「{}」で囲まれた部分の式を評価して文字列に当てはめてくれる

  .. code-block:: csharp
  
    Text1.Text = $"現在時刻は{DateTimeOffset.Now:HH:mm}";
    // Text1.Text = 「現在時刻は12:00」などとなる


----------------------
読み取り専用プロパティ
----------------------

式形式[=>]（ラムダ式ではない）を使用して読み取り専用プロパティを定義できる。
下記例の[1]～[3]は同義である。

.. code-block:: csharp

    // [1]
    public string Title => "タイトル";

    // [2]
    public string Title { get; } = "タイトル";

    // [3]
    public string Title { get => "タイトル"; }

[3]はC# 7.0からの仕様であり、setについても定義できる。

.. code-block:: csharp

    private string locationName;
    public string Name
    {
        get => locationName;
        set => locationName = value;
    }


静的 using ディレクティブ
例外フィルタ

C# 7.0からの仕様
================
出力変数宣言
パターンマッチング
1	is 式の拡張
2	switch 文の拡張
タプル
1	タプル記法
2	分解
値の破棄
ref戻り値、ref変数
1	ref戻り値
2	ref変数

C# 7.1からの仕様
================

非同期なMainメソッド
default式

C# 7.2からの仕様
================

値型の参照セマンティクス
1	in参照渡し、ref readonly参照戻り値
2	readonly構造体
3	ref構造体
末尾以外の場所での名前付き引数
private protected アクセス修飾子
数値リテラルの改善

C# 7.3からの仕様
================

C# 8からの仕様
================

null許容参照型
1	null許容コンテキスト
2	null免除演算子
インターフェイスの既定メンバー

------------------------
パターンマッチングの拡張
------------------------

* switch構文: var y = x switch { ... } 
* 以下の1,2は同一
* https://ufcpp.net/blog/2018/12/cs8switchexpr/

.. code-block:: csharp
    
    // 1
    public void M(年号 e)
    {
        int y;
        switch (e)
        {
            case 明治:
                y = 45;
                break;
            case 大正:
                y = 15;
                break;
            case 昭和:
                y = 64;
                break;
            case 平成:
                y = 31;
                break;
            default: throw new InvalidOperationException();
        }
    }

.. code-block:: csharp

    // 2
    public void M(年号 e)
    {
        var y = e switch
        {
            明治 => 45,
            大正 => 15,
            昭和 => 64,
            平成 => 31,
            _ => throw new InvalidOperationException()
        };
    }

非同期ストリーム
範囲指定
その他の仕様

