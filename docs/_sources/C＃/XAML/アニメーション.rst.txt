==============
アニメーション
==============

アニメーションの種類
====================

* https://blog.okazuki.jp/entry/2014/08/27/214003
* DoubleAnimation：
* ColorAnimation：SolidColorBrushなどの色をアニメーション
* PointAnimation：Point型をアニメーション

アニメーションの基本
====================

* https://blog.okazuki.jp/entry/2014/08/27/214003

.. code-block:: XML

  <Window.Resources>
      <Storyboard x:Key="rectAnimation">  
          <!-- 添付プロパティなので(括弧)付き -->
          <!-- Fromは省略可能で、その場合は現在位置からToまでの意味となる -->
          <!-- Durationは時:分:秒 -->
          <DoubleAnimation
              Storyboard.TargetName="rect"
              Storyboard.TargetProperty="(Canvas.Left)" 
              To="300"
              Duration="0:0:5" />
      </Storyboard>
  </Window.Resources>
  <Canvas>
      <Button Canvas.Top="10" Canvas.Left="10" Content="Animation start">
          <Button.Triggers>
              <EventTrigger RoutedEvent="Button.Click">
                  <BeginStoryboard Storyboard="{StaticResource rectAnimation}" />
              </EventTrigger>
          </Button.Triggers>
      </Button>
      <!-- アニメーションのターゲット -->
      <Rectangle
          x:Name="rect"
          Canvas.Top="50" Canvas.Left="10"
          Width="50" Height="50" Fill="Red"/>
  </Canvas>

* Byは相対値指定で、下記例では、現在値+100の意味

.. code-block:: XML

  <Storyboard x:Key="rectAnimationBy">
      <DoubleAnimation
          Storyboard.TargetName="rect"
          Storyboard.TargetProperty="(Canvas.Left)"
          By="100" 
          Duration="0:0:5" />
  </Storyboard>

アニメーションの繰り返し
========================

* https://blog.okazuki.jp/entry/2014/08/27/214003

.. code-block:: XML

  <Storyboard x:Key="rectAnimationRepeat">
      <!-- RepeatBehaviorにアニメーションを繰り返す時間を指定。Foreverを指定すると無限 -->
      <!-- AutoReverseを指定すると、アニメーションが終了したあと、逆方向のアニメーションを再生 -->
      <DoubleAnimation
          Storyboard.TargetName="rect"
          Storyboard.TargetProperty="(Canvas.Left)"
          To="300" 
          Duration="0:0:5"
          RepeatBehavior="0:0:13"
          AutoReverse="True"/>
  </Storyboard>

コードでアニメーション
======================

* https://blog.okazuki.jp/entry/2014/08/27/214003

.. code-block:: csharp

  var storyboard = new Storyboard();

  var a = new DoubleAnimation();
  // TargetName添付プロパティではなく、Target添付プロパティで
  // 直接アニメーションのターゲットを指定しています。
  Storyboard.SetTarget(a, rect);
  Storyboard.SetTargetProperty(a, new PropertyPath("(Canvas.Left)"));
  a.To = 300;
  a.Duration = TimeSpan.FromSeconds(5);
  storyboard.Children.Add(a);

  // アニメーションを開始します
  storyboard.Begin();

キーフレームアニメーション
==========================

* https://blog.okazuki.jp/entry/2014/08/31/200320
* 連続したアニメーションの定義
* LinearDoubleKeyFrameは値の間を線形補間する
* 線形補間させない場合は、LinearDoubleKeyFrameの代わりにDiscreteDoubleKeyFrameを使用する

.. code-block:: csharp

  <Storyboard x:Key="rectAnimation">
      <DoubleAnimationUsingKeyFrames
          Storyboard.TargetName="rect"
          Storyboard.TargetProperty="(Canvas.Left)"
          Duration="0:0:10">
          <LinearDoubleKeyFrame KeyTime="0:0:2" Value="300" />
          <LinearDoubleKeyFrame KeyTime="0:0:4" Value="0" />
          <LinearDoubleKeyFrame KeyTime="0:0:6" Value="200" />
          <LinearDoubleKeyFrame KeyTime="0:0:8" Value="100" />
          <LinearDoubleKeyFrame KeyTime="0:0:10" Value="300" />
      </DoubleAnimationUsingKeyFrames>
  </Storyboard>

イージング関数
==============

* https://blog.okazuki.jp/entry/2014/08/31/200320
* BoundEase：弾むようなバウンド効果を作成
* CircleEase：円関数を使って加速と減速のアニメーションを作成
* ElasticEase：バネが伸び縮みしながら最終的に停止するアニメーションを作成
* SineEase：サイン式を使って加速と減速のアニメーションを作成
 
.. code-block:: csharp

  <!-- 5秒間で300に向けてバウンドするアニメーション -->
  <Storyboard x:Key="rectAnimation">
      <DoubleAnimation
          Storyboard.TargetName="rect"
          Storyboard.TargetProperty="(Canvas.Left)"
          Duration="0:0:5"
          To="300">
          <DoubleAnimation.EasingFunction>
              <BounceEase EasingMode="EaseOut" />
          </DoubleAnimation.EasingFunction>
      </DoubleAnimation>
  </Storyboard>

Blendによるアニメーションの作成
===============================

* https://blog.okazuki.jp/entry/2014/08/31/200320
* Blend for Visual Studioを使用して複雑なアニメーションの作成が可能







