=========================
TemplateMethodパターン
=========================

適用ケース
==========

* 似た手順で処理を行うクラスを複数（2つ以上）作成する必要がある場合に有効。

定義
====

Template Method パターンは、メソッドにおけるアルゴリズムの骨組みを定義し、いくつかの手順をサブクラスに先送りする。
Template Method は、アルゴリズムの構造を変えることなく、アルゴリズムのある手順をサブクラスに再定義させる。

説明
====

* アルゴリズムの手順を定義し、1つ以上の手順の実装をサブクラスで提供できるようにする。
* テンプレートメソッドの抽象クラスは、具象メソッド、抽象メソッド、フックを定義できる。
* 抽象メソッドはサブクラスが実装する。
* フックは、抽象クラス内で何も実行しないか、またはデフォルトの振る舞いを実行するメソッドであり、必要に応じてサブクラスでオーバライドすることで、様々な時点でアルゴリズムをフックできる。
* Strategy パターンと Template Method パターンはどちらもアルゴリズムをカプセル化するが、前者はコンポジションを使い、後者は継承を使う。
  また、前者は一連のアルゴリズムを定義し交換可能にするのに対し、後者はアルゴリズムの骨子（手順）のみを定義し、サブクラスで実装方法を決める。
* Factory Method は Template Method を特化したパターンである。

.. note:: 
  
  フック（Hook）は、プログラム中の特定の箇所に、利用者が独自の処理を追加できるようにする仕組みである。 
  また、フックを利用して独自の処理を追加することを「フックする」という。 
  処理を追加できる箇所は、元のプログラムの開発者によって、あらかじめ決められている。

図面
====

クラス図の例を :numref:`TemplateMethodパターン_クラス図` に、シーケンス図を :numref:`TemplateMethodパターン_シーケンス図` に各々示す。

.. figure:: images/TemplateMethodパターン_クラス図.png
   :scale: 85%
   :name: TemplateMethodパターン_クラス図

   TemplateMethodパターン クラス図

.. figure:: images/TemplateMethodパターン_シーケンス図.png
   :scale: 85%
   :name: TemplateMethodパターン_シーケンス図

   TemplateMethodパターン シーケンス図

