====
全体
====

概要
====

.. exceltable:: デザインパターン概要
  :file: デザインパターン.xls
  :header: 1
  :selection: A1:B14
  :sheet: Sheet1

類似パターン
============

.. csv-table:: ラップパターン
   :header-rows: 1

   パターン, 目的
   Decorator, インタフェースを変更せずに、責務を追加する
   Adapter, あるインタフェースを別のインタフェースに変換する
   Facade, インタフェースをより簡潔にする

.. csv-table:: 誰が何をする？
   :header-rows: 1

   パターン, 説明
   Template Method, サブクラスがアルゴリズムの手順の実装方法を決める。
   Strategy, 交換可能な振る舞いをカプセル化し、委譲を使って使用すべき振る舞いを決める。
   Factory Method, サブクラスがどの具象クラスをインスタンス化するかを決める。Template Method を特化したパターンである。

OOの原則
==========

* 変化する部分をカプセル化する。
  （アプリケーション内の変化する部分を特定し、不変な部分と分離しカプセル化することで、不変な部分に影響を与えずに変化する部分を後で変更したり拡張したりできる。）
* 継承よりコンポジションを好む。
  （「IS-A」より「HAS-A」が優れている場合がある）
* 実装に対してではなくインタフェースに対してプログラミングする。
  （抽象クラスに対してでも可）
* 相互にやり取りするオブジェクト間には、疎結合設計を使用するようにする。
  （インタフェースのみを知っていればよく、具体的な動作などを知る必要はない）
* クラスは拡張に対しては開かれた状態であるべきであるが、変更に対しては閉じた状態であるべきである。
* 抽象に依存する。具象クラスに依存してはいけない。
  （クラスのすべての責務は、変更される可能性のある部分である。
  複数の責務を持つことは、変更される可能性のある部分が複数あることを意味する。
  この原則は、各クラスに1つだけの責務を与えるよう指導している）

設計原則
========

* アプリケーション内の変化する部分を特定し、不変な部分と分離する。
* 実装に対してではなくインタフェースに対してプログラミングする。
* クラスは拡張に対しては開かれた状態であるべきであるが、変更に対しては閉じた状態であるべきである。
* 抽象に依存する。具象クラスに依存してはいけない。（依存性反転の原則）
* 最小知識の原則 - 直接の友達とだけやり取りする。
* ハリウッドの原則 - こちらを呼び出さないでください。こちらから呼び出します。(Don't call us, we'll call you.)
* クラスは、変更される理由を1つだけ持つべきである。

備考
====

* デザインパターンでの「インタフェースを実装する」という表現は必ずしも"interface"キーワードを使ってクラス宣言することではない。
  （クラスまたはインタフェースである）スーパータイプのメソッドを実装する具象クラスが、そのスーパータイプの「インタフェースを実装している」と考えられる。
  つまり、「インタフェース」　＝　「親クラス」または「インタフェース」と考えられる。
